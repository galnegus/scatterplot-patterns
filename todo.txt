DOING:

Technical fixes
  - Refactor cluster options to use the useSlider hook.

Method improvements

Other shit









TODO:

Technical fixes

Method improvements
  - Remove all the sliders that are not needed, maybe make them available through an "advanced mode" toggle or something
  - Define 5 archetypes for each of radar and pulse
  - New simple interface:
    - All patterns are set according to an "archetype"
    - No sliders at all initally
    - Speed mode: (1) same (2) different
    - 
    - 
Other shit









DONE:

Technical fixes
  - Fix bbox so that it actually sets the furtherst point at = 1., i.e. euclidean distance instead of manhattan distance
  - Make a reusable "slider" hook to make code in options easier to read/update.
  - Add a "default options" (exportable) object to each pattern index.js file, that will be used when creating new patterns and when changing the pattern in the options.
    - Update PatternsOptions.js and PatternOptions.js to use the default options directly from the pattern definitions.
  - Generalize the texture pixel extraction stuff in point.vert => move to function
  - Remove aspect ratio altogether since the bbox is now always square
  - Put scatterplot default options in the scatterplot/constants.js file (e.g. animationEffectSVA)
  - Do more refactoring on pattern fragment shaders, move stuff into separate glslify functions so there's less code repetition
  - Fix texture atlas resolution sizes
  - Radar pattern options: max value > min value constraint
  - Refactor useSlider hook
    - Remove debounce
    - Change argument list
  - Pattern performance improvements
    - A lot of math in fragment shaders that could be moved to script or vertex shader.
  - Fix so that the colorless mode actually has the same colors


Method improvements
  - Add filter for time
  - Add filter for direction (in/out, forward/backward)
  - Add filter for phases? (i.e. how many thingies per cycle, for example 2 pulse waves per cycle instead of 1, or 1.5 (hard?))
    - One way to do it might be to compute mathematically, where are the cycles at this point in time? And then to pick the two that are the closest to the given point, because it can only be one of the closest two! Compute the value at those two and pick the biggest!
      - Have an "emission rate", e_r, set up emission points with the interval e_r covering the range [-1, 2]. To find neighbours for a point x, first subtract the current u_time from x (so equivalent to u_time = 0) and then multiply x with e_r, the neighbouring points are given by floor(x) and ceil(x) and then downscaling the results by dividing with e_r again.
  - Radar max value?
  - Implement hue range for color selection
  - Encode some information in the alpha channel of the pattern?
  - Consider using saturation instead of value?
    - Add check boxes to filters to select whether to modulate:
      - Saturation
      - Value
      - Alpha/Depth
  - Add/test abs() on the hue thingy (it's not there, but it prolly should be so you don't get negative/>1 hue)
  - On/off switch for pattern vs color
  - On/off switch for color vs greyscale
  - Inverting the pattern effect
  - Phase shift parameter ([0, 1])
  - Modulate unused parameter of radar/pulse
    - Radar position by radius (angle is a function of radius)
    - Pulse position by angle (radius is a function of angle)
  - Sequencing mode, shows one pattern at a time
    - Discrete vs continuous sequential
      - Continuous, 3 parameters: length per pattern, transition length, pattern index; output: [0, 1]
        - 3 steps:
          - first produce number x betwenn [0, n+1)
          - second output linear between 0-1 for active pattern i, by taking k = x - i, if k not in [0, 1) => k = 0
          - third map k to [0, 1), [1], (1, 0], according to transition length t,
              so that when k in [0, t) => [0, 1), k in [t, 1-t) => 1, k in [1-t, 1) => (1, 0]
    
Other shit
  - Data import 
  - Being able to export/import pattern settings (json)
  - Generalize data import so that it can take any csv file
  - Loading indicator
    - Do it with redux
    - Apply when parsing or loading csv file








DROPPED (for now):

Technical fixes
  - Fix point hover/select
  - Pattern manager: batch rendering? I.e. one single draw call for all patterns
  - Loading redux state promise
  - Fix option data model so that it syncs up (sort of done?)
  - Fix pattern option so that it doesn't show inactive class patterns

Method improvements
  - Modulate unused parameter of radar/pulse
    - Radar speed by radius (angle is a function of radius [and time?])
  - On/off switch for color vs greyscale (for light theme)

Other shit
  - Visualize gauss function in pattern options
  - Dropdowns in specific pattern options (i.e. color options, wave options, speed options) for less clutter
  - Add third pattern (???)
    - Idea: A vortex, very similar to radar but doesn't move according to radius, instead moves both radius and angle over time, also has a bandwidth.
    - Idea: Random noise, ideally it smoothly transition between different noisy patterns, so it doesn't just jump between frames