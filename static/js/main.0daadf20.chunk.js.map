{"version":3,"sources":["scatterplot/camera.js","scatterplot/bg.frag","scatterplot/bg.vert","scatterplot/point.frag","scatterplot/point.vert","scatterplot/patterns/pattern.vert","scatterplot/patterns/pulse/pulse.frag","scatterplot/patterns/pulse/index.js","scatterplot/patterns/radar/radar.frag","scatterplot/patterns/radar/index.js","scatterplot/patterns/PatternManager.js","scatterplot/patterns/plain/index.js","scatterplot/patterns/plain/plain.frag","scatterplot/constants.js","scatterplot/utils.js","scatterplot/index.js","constants.js","useSlider.js","ScatterplotOptions.js","actions/index.js","dataGen.js","ClusterHeader.js","ClusterOptions.js","DataOptions.js","PatternHeader.js","reducers/categoryColors.js","useColorPicker.js","PulseOptions.js","RadarOptions.js","PatternOptions.js","PatternsOptions.js","Sidebar.js","Meta.js","App.js","serviceWorker.js","reducers/index.js","reducers/isDarkTheme.js","reducers/maxCategories.js","index.js"],"names":["dom2dCamera","element","distance","target","rotation","isNdc","isFixed","isPan","panSpeed","isRotate","rotateSpeed","isZoom","zoomSpeed","onKeyDown","onKeyUp","onMouseDown","onMouseUp","onMouseMove","onWheel","camera","createCamera","isChanged","mouseX","mouseY","prevMouseX","prevMouseY","isLeftMousePressed","yScroll","top","left","width","height","aspectRatio","isAlt","transformPanX","dX","transformPanY","dY","transformScaleX","x","transformScaleY","y","tick","pan","dZ","Math","exp","transformedX","transformedY","scale","wh","hh","x1","y1","x2","y2","radians","vec2","angle","cross","rotate","sign","config","newIsFixed","newIsPan","newIsRotate","newIsZoom","newPanSpeed","newRotateSpeed","newZoomSpeed","refresh","bBox","getBoundingClientRect","keyUpHandler","event","keyDownHandler","altKey","mouseUpHandler","mouseDownHandler","buttons","mouseMoveHandler","clientX","clientY","wheelHandler","preventDefault","deltaMode","deltaY","dispose","undefined","window","removeEventListener","addEventListener","passive","defaultOptions","hsvColor","a","c1","c2","minValue","cyclesPerSecond","wavesPerCycle","direction","hueVariation","hueVariationPeriod","gamma1","gamma2","maxValue","nSpokes","PATTERN_TYPES","defaultPulseOptions","defaultRadarOptions","PatternManager","regl","Error","this","fbo","framebuffer","patternDraws","drawFn","frag","vert","attributes","position","buffer","uniforms","resolution","prop","texAtlasIndex","texAtlasSize","time","color","count","atlasSize","atlasIndex","createPlainDraw","options","createPulseDraw","createRadarDraw","patterns","maxCategories","max","Object","keys","categoriesToRemove","Set","forEach","pattern","delete","category","toString","set","destroy","_has","updateSize","i","type","clear","depth","FLOAT_BYTES","Float32Array","BYTES_PER_ELEMENT","GL_EXTENSIONS","DEFAULT_COLOR_BG","DEFAULT_COLORS","DEFAULT_TARGET","DEFAULT_VIEW","DEFAULT_LASSO_COLOR","DEFAULT_RECTICLE_COLOR","arrayMax","checkReglExtensions","reduce","every","EXTENSION","hasExtension","console","warn","createRegl","canvas","gl","getContext","extensions","getExtension","push","createOriginalRegl","dist","sqrt","getBBox","positions2d","xMin","Infinity","xMax","yMin","yMax","length","hexToRgb","hex","isNormalize","replace","m","r","g","b","substring","match","map","parseInt","isNormFloat","isNormFloatArray","Array","isArray","isPointInPolygon","px","py","polygon","isWithin","j","isUint8","Number","isInteger","isUint8Array","isRgb","rgb","isRgba","rgba","min","normNumArray","toRgba","test","hexToRgba","createScatterplot","initialRegl","background","initialBackground","backgroundImage","initialBackgroundImage","initialCanvas","document","createElement","colorBy","initialColorBy","colors","initialColors","lassoColor","initialLassoColor","lassoMinDelay","initialLassoMinDelay","lassoMinDist","initialLassoMinDist","showRecticle","initialShowRecticle","recticleColor","initialRecticleColor","pointSize","initialPointSize","pointSizeSelected","initialPointSizeSelected","pointOutlineWidth","initialPointOutlineWidth","initialWidth","initialHeight","initialTarget","initialDistance","initialRotation","view","initialView","pubSub","createPubSub","scratch","mousePosition","lasso","lassoPrevMousePos","searchIndex","viewAspectRatio","projection","model","recticleHLine","recticleVLine","stateTex","normalPointsIndexBuffer","selectedPointsIndexBuffer","hoveredPointIndexBuffer","colorTex","hoveredPoint","bboxTex","glBench","mouseDown","mouseDownShift","mouseDownPosition","numPoints","selection","lassoPos","lassoScatterPos","dataAspectRatio","stateTexRes","colorTexRes","isViewChanged","isInit","opacity","isMouseInCanvas","bboxTexRes","patternManager","getMousePos","slice","getNdcX","getNdcY","getMouseGlPos","getScatterGlPos","v","mvp","mat4","invert","multiply","vec4","transformMat4","raycast","clostestPoint","scaling","scaledPointSize","log2","devicePixelRatio","xNormalizedScaledPointSize","yNormalizedScaledPointSize","pointsInBBox","range","minDist","idx","points","ptX","ptY","d","lassoExtend","currMousePos","setPoints","lassoExtendDb","withThrottle","findPointsInLasso","lassoPolygon","pointsInPolygon","pointIdx","deselect","publish","select","usage","data","getRelativeMousePosition","rect","lassoEnd","pointsInLasso","shiftKey","mouseClickHandler","currentMousePosition","mouseDblClickHandler","hover","blurHandler","createColorTexture","newColors","numColors","ceil","texture","shape","updateViewAspectRatio","fromScaling","setDataAspectRatio","newDataAspectRatio","setColors","tmp","rgbaOpaque","e","error","setHeight","newHeight","setPointSize","newPointSize","setPointSizeSelected","newPointSizeSelected","setPointOutlineWidth","newPointOutlineWidth","setWidth","newWidth","setColorBy","setOpacity","newOpacity","getBackgroundImage","getColorTex","getColorTexRes","getNormalPointsIndexBuffer","getSelectedPointsIndexBuffer","getPointSize","getNormalPointSizeExtra","getStateTex","getStateTexRes","getProjection","getView","getModel","getScaling","getNormalNumPoints","getIsColoredByCategory","getIsColoredByValue","getMaxColor","getNumColorStates","getTexture","getAtlasSize","getBBoxTex","getBBoxTexRes","drawPoints","getPointSizeExtra","getNumPoints","getStateIndexBuffer","globalState","POINT_FS","POINT_VS","blend","enable","func","srcRGB","srcAlpha","dstRGB","dstAlpha","stateIndex","size","pointSizeExtra","isColoredByCategory","isColoredByValue","maxColor","numColorStates","textureAtlas","primitive","drawPointBodies","drawHoveredPoint","drawSelectedPoint","numOutlinedPoints","drawBackgroundImage","BG_FS","BG_VS","drawRecticle","draw","createPointIndex","numNewPoints","index","createStateTexture","newPoints","createBBoxTexture","bboxByCategory","numCategories","computeCentroid","sumX","sumY","point","computeBBox","centroid","maxSquaredDist","squaredDist","maxDist","KDBush","p","pointsByCategory","_groupBy","_mapValues","_","showRecticleOnce","drawRaf","withRaf","publicDraw","withDraw","f","out","setBackground","newBackground","setBackgroundImage","newBackgroundImage","setLassoColor","newLassoColor","setStyle","setLassoMinDelay","newLassoMinDelay","setLassoMinDist","newLassoMinDist","setShowRecticle","newShowRecticle","setRecticleColor","newRecticleColor","poll","get","property","newColorBy","needsRedraw","newHoveredPoint","subdata","reset","clone","lookAt","key","mouseEnterCanvasHandler","mouseLeaveCanvasHandler","initCamera","createDom2dCamera","init","createLine","is2d","GLBench","frame","begin","end","nextFrame","floor","subscribe","unsubscribe","defaultValues","updateValue","_debounce","optionName","newValue","useSlider","defaultValue","processNewValueFn","useState","value","setValue","onChange","_isFunction","ScatterplotOptions","scatterplot","pointSizeChange","isDarkTheme","useSelector","state","dispatch","useDispatch","defaultChecked","label","innerLabel","innerLabelChecked","alignIndicator","Alignment","RIGHT","inline","stepSize","labelStepSize","labelPrecision","fill","style","textAlign","className","boxMuller","sigma","k","u1","u2","twoPI","PI","random","EPSILON","radius","log","z0","cos","z1","sin","cosA","sinA","kcossinMcossin","ClusterHeader","clusterKey","setIsOpen","isOpen","categoryColors","shallowEqual","minimal","active","onClick","backgroundColor","updateX","setCluster","updateY","updateSigma","updateAngle","updateAmplitude","amplitude","updateN","n","updateCategory","ClusterOptions","cluster","removeCluster","setX","setY","setSigma","setAngle","setAmplitude","setN","setCategory","intent","Intent","DANGER","defaultCluster","keyGen","DataOptions","1","2","clusters","setClusters","useEffect","dataGen","acc","curr","concat","createSetCluster","newCluster","oldClusters","renderClusterOptions","PRIMARY","usedCategories","add","has","unusedCategory","PatternHeader","patternKey","defaultColors","useColorPicker","setPattern","setColor","newColor","hsv","h","s","updateCategoryColor","renderPercentage","val","round","renderSeconds","toPrecision","PulseOptions","aChange","c1Change","c2Change","minValueChange","cyclesPerSecondChange","wavesPerCycleChange","colorChange","hueVariationChange","hueVariationPeriodChange","checked","labelRenderer","circleSize","circleSpacing","RadarOptions","gamma1Change","gamma2Change","maxValueChange","nSpokesChange","PatternOptions","typeOptions","setType","defaultPulse","toHsvColor","hsvObj","tinycolor","toHsv","setPatterns","setAll","createSetPattern","newPattern","oldPatterns","categoriesToAdd","removePattern","addPattern","renderPatternOptions","Sidebar","elevation","id","title","panel","Meta","App","setScatterplot","canvasRef","useCallback","initColors","initScatterplot","darkBg","ref","Boolean","location","hostname","combineReducers","action","shallowCopy","store","createStore","rootReducer","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0daadf20.chunk.js","sourcesContent":["import createCamera from \"camera-2d-simple\";\r\nimport { vec2 } from \"gl-matrix\";\r\n\r\nconst dom2dCamera = (\r\n  element,\r\n  {\r\n    distance = 1.0,\r\n    target = [0, 0],\r\n    rotation = 0,\r\n    isNdc = true,\r\n    isFixed = false,\r\n    isPan = true,\r\n    panSpeed = 1,\r\n    isRotate = true,\r\n    rotateSpeed = 1,\r\n    isZoom = true,\r\n    zoomSpeed = 1,\r\n    onKeyDown = () => {},\r\n    onKeyUp = () => {},\r\n    onMouseDown = () => {},\r\n    onMouseUp = () => {},\r\n    onMouseMove = () => {},\r\n    onWheel = () => {}\r\n  } = {}\r\n) => {\r\n  let camera = createCamera(target, distance, rotation);\r\n  let isChanged = false;\r\n  let mouseX = 0;\r\n  let mouseY = 0;\r\n  let prevMouseX = 0;\r\n  let prevMouseY = 0;\r\n  let isLeftMousePressed = false;\r\n  let yScroll = 0;\r\n\r\n  let top = 0;\r\n  let left = 0;\r\n  let width = 1;\r\n  let height = 1;\r\n  let aspectRatio = 1;\r\n  let isAlt = false;\r\n\r\n  const transformPanX = isNdc\r\n    ? dX => (dX / width) * 2 * aspectRatio // to normalized device coords\r\n    : dX => dX;\r\n  const transformPanY = isNdc\r\n    ? dY => (dY / height) * 2 // to normalized device coords\r\n    : dY => -dY;\r\n\r\n  const transformScaleX = isNdc\r\n    ? x => (-1 + (x / width) * 2) * aspectRatio // to normalized device coords\r\n    : x => x;\r\n  const transformScaleY = isNdc\r\n    ? y => 1 - (y / height) * 2 // to normalized device coords\r\n    : y => y;\r\n\r\n  const tick = () => {\r\n    if (isFixed) return false;\r\n\r\n    isChanged = false;\r\n\r\n    if (isPan && isLeftMousePressed && !isAlt) {\r\n      // To pan 1:1 we need to half the width and height because the uniform\r\n      // coordinate system goes from -1 to 1.\r\n      camera.pan([\r\n        transformPanX(panSpeed * (mouseX - prevMouseX)),\r\n        transformPanY(panSpeed * (prevMouseY - mouseY))\r\n      ]);\r\n      isChanged = true;\r\n    }\r\n\r\n    if (isZoom && yScroll) {\r\n      const dZ = zoomSpeed * Math.exp(yScroll / height);\r\n\r\n      // Get normalized device coordinates (NDC)\r\n      const transformedX = transformScaleX(mouseX);\r\n      const transformedY = transformScaleY(mouseY);\r\n\r\n      camera.scale(1 / dZ, [transformedX, transformedY]);\r\n\r\n      isChanged = true;\r\n    }\r\n\r\n    if (isRotate && isLeftMousePressed && isAlt) {\r\n      const wh = width / 2;\r\n      const hh = height / 2;\r\n      const x1 = prevMouseX - wh;\r\n      const y1 = hh - prevMouseY;\r\n      const x2 = mouseX - wh;\r\n      const y2 = hh - mouseY;\r\n      // Angle between the start and end mouse position with respect to the\r\n      // viewport center\r\n      const radians = vec2.angle([x1, y1], [x2, y2]);\r\n      // Determine the orientation\r\n      const cross = x1 * y2 - x2 * y1;\r\n\r\n      camera.rotate(rotateSpeed * radians * Math.sign(cross));\r\n\r\n      isChanged = true;\r\n    }\r\n\r\n    // Reset scroll delta and mouse position\r\n    yScroll = 0;\r\n    prevMouseX = mouseX;\r\n    prevMouseY = mouseY;\r\n\r\n    return isChanged;\r\n  };\r\n\r\n  const config = ({\r\n    isFixed: newIsFixed = null,\r\n    isPan: newIsPan = null,\r\n    isRotate: newIsRotate = null,\r\n    isZoom: newIsZoom = null,\r\n    panSpeed: newPanSpeed = null,\r\n    rotateSpeed: newRotateSpeed = null,\r\n    zoomSpeed: newZoomSpeed = null\r\n  } = {}) => {\r\n    isFixed = newIsFixed !== null ? newIsFixed : isFixed;\r\n    isPan = newIsPan !== null ? newIsPan : isPan;\r\n    isRotate = newIsRotate !== null ? newIsRotate : isRotate;\r\n    isZoom = newIsZoom !== null ? newIsZoom : isZoom;\r\n    panSpeed = +newPanSpeed > 0 ? newPanSpeed : panSpeed;\r\n    rotateSpeed = +newRotateSpeed > 0 ? newRotateSpeed : rotateSpeed;\r\n    zoomSpeed = +newZoomSpeed > 0 ? newZoomSpeed : zoomSpeed;\r\n  };\r\n\r\n  const refresh = () => {\r\n    const bBox = element.getBoundingClientRect();\r\n    top = bBox.top;\r\n    left = bBox.left;\r\n    width = bBox.width;\r\n    height = bBox.height;\r\n    aspectRatio = width / height;\r\n  };\r\n\r\n  const keyUpHandler = event => {\r\n    isAlt = false;\r\n\r\n    onKeyUp(event);\r\n  };\r\n\r\n  const keyDownHandler = event => {\r\n    isAlt = event.altKey;\r\n\r\n    onKeyDown(event);\r\n  };\r\n\r\n  const mouseUpHandler = event => {\r\n    isLeftMousePressed = false;\r\n\r\n    onMouseUp(event);\r\n  };\r\n\r\n  const mouseDownHandler = event => {\r\n    isLeftMousePressed = event.buttons === 1;\r\n\r\n    onMouseDown(event);\r\n  };\r\n\r\n  const mouseMoveHandler = event => {\r\n    //prevMouseX = mouseX;\r\n    //prevMouseY = mouseY;\r\n    mouseX = event.clientX - left;\r\n    mouseY = event.clientY - top;\r\n\r\n    onMouseMove(event);\r\n  };\r\n\r\n  const wheelHandler = event => {\r\n    event.preventDefault();\r\n\r\n    const scale = event.deltaMode === 1 ? 12 : 1;\r\n\r\n    yScroll += scale * (event.deltaY || 0);\r\n\r\n    onWheel(event);\r\n  };\r\n\r\n  const dispose = () => {\r\n    camera = undefined;\r\n    window.removeEventListener(\"keydown\", keyDownHandler);\r\n    window.removeEventListener(\"keyup\", keyUpHandler);\r\n    element.removeEventListener(\"mousedown\", mouseDownHandler);\r\n    window.removeEventListener(\"mouseup\", mouseUpHandler);\r\n    window.removeEventListener(\"mousemove\", mouseMoveHandler);\r\n    element.removeEventListener(\"wheel\", wheelHandler);\r\n  };\r\n\r\n  window.addEventListener(\"keydown\", keyDownHandler, { passive: true });\r\n  window.addEventListener(\"keyup\", keyUpHandler, { passive: true });\r\n  element.addEventListener(\"mousedown\", mouseDownHandler, { passive: true });\r\n  window.addEventListener(\"mouseup\", mouseUpHandler, { passive: true });\r\n  window.addEventListener(\"mousemove\", mouseMoveHandler, { passive: true });\r\n  element.addEventListener(\"wheel\", wheelHandler, { passive: false });\r\n\r\n  refresh();\r\n\r\n  camera.config = config;\r\n  camera.dispose = dispose;\r\n  camera.refresh = refresh;\r\n  camera.tick = tick;\r\n\r\n  return camera;\r\n};\r\n\r\nexport default dom2dCamera;\r\n","export default \"precision mediump float;\\n#define GLSLIFY 1\\n\\nuniform sampler2D texture;\\n\\nvarying vec2 uv;\\n\\nvoid main () {\\n  gl_FragColor = texture2D(texture, uv);\\n}\\n\";","export default \"precision mediump float;\\n#define GLSLIFY 1\\n\\nuniform mat4 projection;\\nuniform mat4 model;\\nuniform mat4 view;\\n\\nattribute vec2 position;\\n\\nvarying vec2 uv;\\n\\nvoid main () {\\n  uv = position;\\n  gl_Position = projection * view * model * vec4(1.0 - 2.0 * position, 0, 1);\\n}\\n\";","export default \"#ifdef GL_OES_standard_derivatives\\n#extension GL_OES_standard_derivatives : enable\\n#endif\\n\\nprecision mediump float;\\n#define GLSLIFY 1\\n\\nvarying vec4 color;\\nvarying vec2 uv;\\n\\nvoid main() {\\n  float r = 0.0, delta = 0.0, alpha = 1.0;\\n  vec2 cxy = 2.0 * gl_PointCoord - 1.0;\\n  r = dot(cxy, cxy);\\n\\n  #ifdef GL_OES_standard_derivatives\\n    delta = fwidth(r);\\n    alpha = 1.0 - smoothstep(1.0 - delta, 1.0 + delta, r);\\n  #endif\\n\\n  // TODO: Move this out of the shader! It's totally unnecessary\\n  // this can (should) be computed before, in the javascript, otherwise it has to be recomputed for every single pixel in every single point\\n  // SOLUTION: make a texture, exactly like with stateTex and colorTex, with three values (min, max, aspectRatio), I think that's all we need\\n  // for now just change this to send in a vec3 (min, max, aspectRatio).\\n\\n  // ALSO: If the color is the same for all pixels of the same point => do computation in vertex shader and pass the results as a varying variable.\\n\\n  // TODO: fix aspect ratio by comparing yDist and xDist and fixing the longer one (or something)\\n\\n  gl_FragColor = vec4(color.rgb, alpha * color.a);\\n}\\n\";","export default \"precision mediump float;\\n#define GLSLIFY 1\\n\\nuniform sampler2D colorTex;\\nuniform float colorTexRes;\\nuniform sampler2D stateTex;\\nuniform float stateTexRes;\\nuniform float pointSize;\\nuniform float pointSizeExtra;\\nuniform float numPoints;\\nuniform float globalState;\\nuniform float isColoredByCategory;\\nuniform float isColoredByValue;\\nuniform float maxColor;\\nuniform float numColorStates;\\nuniform float scaling;\\nuniform mat4 projection;\\nuniform mat4 model;\\nuniform mat4 view;\\n\\nattribute float stateIndex;\\n\\nuniform sampler2D textureAtlas;\\nuniform vec2 atlasSize;\\n\\nuniform sampler2D bboxTex;\\nuniform float bboxTexRes;\\n\\n// variables to send to the fragment shader\\nvarying vec4 color;\\nvarying vec2 uv;\\n\\nfloat modI(float a, float b) {\\n  float m = a - floor((a + 0.5) / b) * b;\\n   return floor(m + 0.5);\\n}\\n\\nvec4 getFromTexture(in sampler2D texture, in float textureRes, in float index) {\\n  float eps = 0.5 / textureRes;\\n  float rowIndex = floor((index + eps) / textureRes);\\n  vec2 texIndex = vec2(\\n    (index / textureRes) - rowIndex + eps,\\n    rowIndex / textureRes\\n  );\\n  return texture2D(texture, texIndex);\\n}\\n\\nvec2 texAtlasIndex(in float index, in vec2 position) {\\n  float maxLength = atlasSize.x * atlasSize.y;\\n  float modIndex = modI(index, maxLength);\\n\\n  float yIndex = floor((modIndex + 0.5) / atlasSize.x);\\n  float xIndex = modI(modIndex, atlasSize.x);\\n\\n  float yStep = 1.0 / atlasSize.y;\\n  float xStep = 1.0 / atlasSize.x;\\n\\n  vec2 min = vec2(xIndex * xStep, yIndex * yStep);\\n  vec2 max = vec2((xIndex + 1.0) * xStep, (yIndex + 1.0) * yStep);\\n\\n  return position * (max - min) + min;\\n}\\n\\nvec4 findColor(in float category) {\\n  // this should be generalizable\\n  vec4 bbox = getFromTexture(bboxTex, bboxTexRes, category);\\n\\n  vec2 min = bbox.xy;\\n  vec2 max = bbox.zw;\\n  vec2 normalizedPosition = (uv - min) / (max - min);\\n\\n  return texture2D(textureAtlas, texAtlasIndex(category, normalizedPosition));\\n}\\n\\nvoid main() {\\n  // First get the state\\n  vec4 state = getFromTexture(stateTex, stateTexRes, stateIndex);\\n\\n  uv = state.xy;\\n  gl_Position = projection * view * model * vec4(state.x, state.y, 0.0, 1.0);\\n\\n  // Determine color index\\n  float colorIndexCat = state.z * isColoredByCategory;\\n  float colorIndexVal = floor(state.w * maxColor) * isColoredByValue;\\n  float colorIndex = colorIndexCat + colorIndexVal;\\n  // Multiply by the number of color states per color\\n  // I.e., normal, active, hover, background, etc.\\n  colorIndex *= numColorStates;\\n  // Half a \\\"pixel\\\" or \\\"texel\\\" in texture coordinates\\n  float eps = 0.5 / colorTexRes;\\n  float colorLinearIndex = colorIndex + globalState;\\n  // Need to add cEps here to avoid floating point issue that can lead to\\n  // dramatic changes in which color is loaded as floor(3/2.9) = 1 but\\n  // floor(3/3.0001) = 0!\\n  float colorRowIndex = floor((colorLinearIndex + eps) / colorTexRes);\\n\\n  vec2 colorTexIndex = vec2(\\n    (colorLinearIndex / colorTexRes) - colorRowIndex + eps,\\n    colorRowIndex / colorTexRes\\n  );\\n\\n  //color = texture2D(colorTex, colorTexIndex);\\n  color = findColor(state.z);\\n\\n  // The final scaling consists of linear scaling in [0, 1] and log scaling\\n  // in [1, [\\n  float finalScaling = min(1.0, scaling) + log2(max(1.0, scaling));\\n\\n  gl_PointSize = pointSize * finalScaling + pointSizeExtra;\\n}\\n\";","export default \"precision mediump float;\\n#define GLSLIFY 1\\n\\nattribute vec2 position;\\n\\nuniform vec2 resolution;\\nuniform float texAtlasIndex;\\nuniform vec2 texAtlasSize;\\nuniform float time;\\n\\nvarying vec2 posMin;\\nvarying vec2 posMax;\\n\\nfloat modI(float a, float b) {\\n  float m = a - floor((a + 0.5) / b) * b;\\n  return floor(m + 0.5);\\n}\\n\\nvoid main () {\\n  float maxLength = texAtlasSize.x * texAtlasSize.y;\\n  float modIndex = modI(texAtlasIndex, maxLength);\\n\\n  float yIndex = floor((modIndex + 0.5) / texAtlasSize.x);\\n  float xIndex = modI(modIndex, texAtlasSize.x);\\n\\n  float yStep = 1.0 / float(texAtlasSize.y);\\n  float xStep = 1.0 / float(texAtlasSize.x);\\n\\n  posMin = vec2(xIndex * xStep, yIndex * yStep);\\n  posMax = vec2((xIndex + 1.0) * xStep, (yIndex + 1.0) * yStep);\\n\\n  vec2 texPos = (position + 1.0) * 0.5;\\n  texPos = texPos * (posMax - posMin) + posMin;\\n  texPos = texPos * 2.0 - 1.0; \\n\\n  gl_Position = vec4(texPos, 0, 1);\\n}\\n\";","export default \"precision mediump float;\\n#define GLSLIFY 1\\n\\nfloat when_gt_1540259130(float x, float y) {\\n  return max(sign(x - y), 0.0);\\n}\\n\\nvec2 when_gt_1540259130(vec2 x, vec2 y) {\\n  return max(sign(x - y), 0.0);\\n}\\n\\nvec3 when_gt_1540259130(vec3 x, vec3 y) {\\n  return max(sign(x - y), 0.0);\\n}\\n\\nvec4 when_gt_1540259130(vec4 x, vec4 y) {\\n  return max(sign(x - y), 0.0);\\n}\\n\\nfloat when_le_1604150559(float x, float y) {\\n  return 1.0 - when_gt_1540259130(x, y);\\n}\\n\\nvec2 when_le_1604150559(vec2 x, vec2 y) {\\n  return 1.0 - when_gt_1540259130(x, y);\\n}\\n\\nvec3 when_le_1604150559(vec3 x, vec3 y) {\\n  return 1.0 - when_gt_1540259130(x, y);\\n}\\n\\nvec4 when_le_1604150559(vec4 x, vec4 y) {\\n  return 1.0 - when_gt_1540259130(x, y);\\n}\\n\\nuniform vec3 hsvColor;\\nuniform float hueVariation;\\nuniform float hueVariationPeriod;\\nuniform vec2 resolution;\\nuniform float time;\\nuniform float cyclesPerSecond;\\nuniform float wavesPerCycle;\\nuniform float direction;\\n\\nuniform float a;\\nuniform float c1;\\nuniform float c2;\\nuniform float minValue;\\n\\nvarying vec2 posMin;\\nvarying vec2 posMax;\\n\\n//  Function from Iñigo Quiles\\n//  https://www.shadertoy.com/view/MsS3Wc\\nvec3 hsv2rgb_smooth( in vec3 c ) {\\n  vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\\n  rgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing \\n  return c.z * mix( vec3(1.0), rgb, c.y);\\n}\\n\\n// https://stackoverflow.com/a/22400799\\nfloat triangleWave(in float x, in float period) {\\n  float amplitude = 1.0;\\n  float halfPeriod = period / 2.0;\\n  return (amplitude / halfPeriod) * (halfPeriod - abs(mod(x, period) - halfPeriod));\\n}\\n\\nfloat gauss(in float diff) {\\n  float coolDiff = diff / wavesPerCycle;\\n  float c = c1 * when_gt_1540259130(coolDiff, 0.0) + c2 * when_le_1604150559(coolDiff, 0.0);\\n  return a * exp(-pow(coolDiff, 2.0)/(2.0 * c * c));\\n}\\n\\nvoid main() {\\n  vec2 normalizedFragCoord = (gl_FragCoord.xy / resolution - posMin) / (posMax - posMin); \\n\\n  float dist = distance(normalizedFragCoord, vec2(0.5, 0.5)) * 2.0;\\n\\n  float scaledTime = direction * cyclesPerSecond * time;\\n\\n  float diff = dist - scaledTime;\\n  diff = mod(diff, 1.0 / wavesPerCycle);\\n\\n  float newD = diff * wavesPerCycle - 0.5;\\n  float leftTerm = floor(newD) / wavesPerCycle;\\n  float rightTerm = ceil(newD) / wavesPerCycle;\\n\\n  float leftDiff = gauss(newD);\\n  float rightDiff = gauss(newD);\\n\\n  float value = max(leftDiff, rightDiff);\\n\\n  value = value * (1.0 - minValue) + minValue;\\n  float hue = hsvColor.x + (pow(triangleWave(time, hueVariationPeriod), 1.0) * 2.0 - 1.0) * hueVariation;\\n\\n  gl_FragColor = vec4(hsv2rgb_smooth(vec3(hue, hsvColor.y, value * hsvColor.z)), 1.0);\\n}\\n\";","import vert from '../pattern.vert';\r\nimport frag from './pulse.frag';\r\n\r\nexport const defaultOptions = {\r\n  hsvColor: [0.5, 1, 1],\r\n  a: 1,\r\n  c1: 0.1,\r\n  c2: 0.1,\r\n  minValue: 0.2,\r\n  cyclesPerSecond: 1,\r\n  wavesPerCycle: 1,\r\n  direction: 1,\r\n  hueVariation: 0.1,\r\n  hueVariationPeriod: 2,\r\n};\r\n\r\nexport default function createPulseDraw(regl, fbo) { \r\n  const drawFn = regl({\r\n    frag: frag,\r\n    vert: vert,\r\n    attributes: {\r\n      position: regl.buffer([\r\n        [-1, -1],\r\n        [1, -1],\r\n        [-1, 1],\r\n        [1, -1],\r\n        [-1, 1],\r\n        [1, 1],\r\n      ]),\r\n    },\r\n    uniforms: {\r\n      resolution: regl.prop('resolution'),\r\n      texAtlasIndex: regl.prop('texAtlasIndex'),\r\n      texAtlasSize: regl.prop('texAtlasSize'),\r\n      time: regl.prop('time'),\r\n\r\n      hsvColor: regl.prop('hsvColor'),\r\n      a: regl.prop('a'),\r\n      c1: regl.prop('c1'),\r\n      c2: regl.prop('c2'),\r\n      minValue: regl.prop('minValue'),\r\n      cyclesPerSecond: regl.prop('cyclesPerSecond'),\r\n      wavesPerCycle: regl.prop('wavesPerCycle'),\r\n      direction: regl.prop('direction'),\r\n      hueVariation: regl.prop('hueVariation'),\r\n      hueVariationPeriod: regl.prop('hueVariationPeriod'),\r\n    },\r\n    count: 6,\r\n    framebuffer: fbo,\r\n  });\r\n\r\n  return (fbo, texAtlasSize, texAtlasIndex, time, options) => {\r\n    const {\r\n      hsvColor, a, c1, c2, minValue, cyclesPerSecond, wavesPerCycle,\r\n      direction, hueVariation, hueVariationPeriod\r\n    } = { ...defaultOptions, ...options};\r\n\r\n    drawFn({\r\n      resolution: [fbo.width, fbo.height],\r\n      texAtlasSize,\r\n      texAtlasIndex,\r\n      time,\r\n      hsvColor,\r\n      a,\r\n      c1,\r\n      c2,\r\n      minValue,\r\n      cyclesPerSecond,\r\n      wavesPerCycle,\r\n      direction,\r\n      hueVariation,\r\n      hueVariationPeriod,\r\n    });\r\n  };\r\n}\r\n","export default \"precision mediump float;\\n#define GLSLIFY 1\\n\\nfloat when_gt_1540259130(float x, float y) {\\n  return max(sign(x - y), 0.0);\\n}\\n\\nvec2 when_gt_1540259130(vec2 x, vec2 y) {\\n  return max(sign(x - y), 0.0);\\n}\\n\\nvec3 when_gt_1540259130(vec3 x, vec3 y) {\\n  return max(sign(x - y), 0.0);\\n}\\n\\nvec4 when_gt_1540259130(vec4 x, vec4 y) {\\n  return max(sign(x - y), 0.0);\\n}\\n\\nfloat when_le_1604150559(float x, float y) {\\n  return 1.0 - when_gt_1540259130(x, y);\\n}\\n\\nvec2 when_le_1604150559(vec2 x, vec2 y) {\\n  return 1.0 - when_gt_1540259130(x, y);\\n}\\n\\nvec3 when_le_1604150559(vec3 x, vec3 y) {\\n  return 1.0 - when_gt_1540259130(x, y);\\n}\\n\\nvec4 when_le_1604150559(vec4 x, vec4 y) {\\n  return 1.0 - when_gt_1540259130(x, y);\\n}\\n\\nuniform vec3 hsvColor;\\nuniform float hueVariation;\\nuniform float hueVariationPeriod;\\nuniform vec2 resolution;\\nuniform float time;\\n\\nuniform float gamma1;\\nuniform float gamma2;\\nuniform float maxValue;\\nuniform float minValue;\\nuniform float cyclesPerSecond;\\nuniform float nSpokes;\\nuniform float direction;\\n\\nvarying vec2 posMin;\\nvarying vec2 posMax;\\n\\nconst float PI = 3.1415926535897932384626433832795;\\nconst float TAU = 6.2831853071795864769252867665590;\\n\\n//  Function from Iñigo Quiles\\n//  https://www.shadertoy.com/view/MsS3Wc\\nvec3 hsv2rgb_smooth( in vec3 c ) {\\n  vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\\n  rgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing \\n  return c.z * mix( vec3(1.0), rgb, c.y);\\n}\\n\\n// https://stackoverflow.com/a/22400799\\nfloat triangleWave(in float x, in float period) {\\n  float amplitude = 1.0;\\n  float halfPeriod = period / 2.0;\\n  return (amplitude / halfPeriod) * (halfPeriod - abs(mod(x, period) - halfPeriod));\\n}\\n\\nfloat coolAbs(in float x) {\\n  return -abs(x - 1.0) + 1.0;\\n} \\n\\nfloat angleDifference(in float a, in float b, out float gamma) {\\n  float diff1 = mod((a - b), TAU / nSpokes);\\n  float diff2 = mod((b - a), TAU / nSpokes);\\n\\n  float d1_less_equal_d2 = when_le_1604150559(diff1, diff2);\\n  float d1_greater_than_d2 = when_gt_1540259130(diff1, diff2);\\n\\n  gamma = d1_less_equal_d2 * gamma2 + d1_greater_than_d2 * gamma1;\\n  return d1_less_equal_d2 * diff1 + d1_greater_than_d2 * diff2;\\n}\\n\\nvoid main() {\\n  vec2 normalizedFragCoord = (gl_FragCoord.xy / resolution - posMin) / (posMax - posMin);\\n\\n  float scaledTime = direction * time * cyclesPerSecond;\\n\\n  float timeAngle = scaledTime * TAU;\\n\\n  vec2 centerDist = normalizedFragCoord - vec2(0.5, 0.5);\\n  float fragAngle = atan(centerDist.x, centerDist.y) + PI; // from [-pi, pi] to [0, 2pi]\\n  float gamma;\\n  float angleDist = angleDifference(fragAngle, timeAngle, gamma) * nSpokes / PI;\\n\\n  float value = pow(1.0 - angleDist, gamma); // gamma\\n\\n  value = value * (maxValue - minValue) + minValue;\\n\\n  float hue = hsvColor.x + (pow(triangleWave(time, hueVariationPeriod), 1.0) * 2.0 - 1.0) * hueVariation;\\n\\n  gl_FragColor = vec4(hsv2rgb_smooth(vec3(hue, hsvColor.y, value * hsvColor.z)), 1.0);\\n}\\n\";","import vert from '../pattern.vert';\r\nimport frag from './radar.frag';\r\n\r\nexport const defaultOptions = {\r\n  hsvColor: [0.8, 1, 1],\r\n  gamma1: 2.0,\r\n  gamma2: 2.0,\r\n  maxValue: 1,\r\n  minValue: 0.2,\r\n  cyclesPerSecond: 1,\r\n  nSpokes: 2,\r\n  direction: 1,\r\n  hueVariation: 0.1,\r\n  hueVariationPeriod: 2,\r\n}\r\n\r\nexport default function createRadarDraw(regl, fbo) { \r\n  const drawFn = regl({\r\n    frag: frag,\r\n    vert: vert,\r\n    attributes: {\r\n      position: regl.buffer([\r\n        [-1, -1],\r\n        [1, -1],\r\n        [-1, 1],\r\n        [1, -1],\r\n        [-1, 1],\r\n        [1, 1],\r\n      ]),\r\n    },\r\n    uniforms: {\r\n      resolution: regl.prop('resolution'),\r\n      texAtlasIndex: regl.prop('texAtlasIndex'),\r\n      texAtlasSize: regl.prop('texAtlasSize'),\r\n      time: regl.prop('time'),\r\n      hsvColor: regl.prop('hsvColor'),\r\n      gamma1: regl.prop('gamma1'),\r\n      gamma2: regl.prop('gamma2'),\r\n      maxValue: regl.prop('maxValue'),\r\n      minValue: regl.prop('minValue'),\r\n      cyclesPerSecond: regl.prop('cyclesPerSecond'),\r\n      nSpokes: regl.prop('nSpokes'),\r\n      direction: regl.prop('direction'),\r\n      hueVariation: regl.prop('hueVariation'),\r\n      hueVariationPeriod: regl.prop('hueVariationPeriod'),\r\n    },\r\n    count: 6,\r\n    framebuffer: fbo,\r\n  });\r\n\r\n  return (fbo, texAtlasSize, texAtlasIndex, time, options) => {\r\n    const { \r\n      hsvColor, gamma1, gamma2, maxValue, minValue, cyclesPerSecond,\r\n      nSpokes, direction, hueVariation, hueVariationPeriod,\r\n    } = { ...defaultOptions, ...options };\r\n\r\n    drawFn({\r\n      resolution: [fbo.width, fbo.height],\r\n      texAtlasSize,\r\n      texAtlasIndex,\r\n      time,\r\n      hsvColor,\r\n      gamma1,\r\n      gamma2,\r\n      maxValue,\r\n      minValue,\r\n      cyclesPerSecond,\r\n      nSpokes,\r\n      direction,\r\n      hueVariation,\r\n      hueVariationPeriod,\r\n    });\r\n  };\r\n}\r\n","import _has from 'lodash-es/has';\r\nimport createPlainDraw from './plain';\r\nimport createPulseDraw from './pulse';\r\nimport createRadarDraw from './radar';\r\nimport { defaultOptions as defaultPulseOptions } from './pulse';\r\nimport { defaultOptions as defaultRadarOptions } from './radar';\r\n\r\nexport const PATTERN_TYPES = {\r\n  PLAIN: 0,\r\n  PULSE: 1,\r\n  RADAR: 2,\r\n};\r\n\r\nexport const defaultOptions = {\r\n  [PATTERN_TYPES.PULSE]: defaultPulseOptions,\r\n  [PATTERN_TYPES.RADAR]: defaultRadarOptions,\r\n};\r\n\r\nexport default class PatternManager {\r\n  #patternDraws;\r\n  #patterns;\r\n  #fbo;\r\n  #regl;\r\n  #maxCategories;\r\n  #atlasSize;\r\n\r\n  constructor(regl) {\r\n    if (!regl) throw new Error('PatternManager must have reference to regl object.');\r\n\r\n    this.fbo = regl.framebuffer({\r\n      width: 1000, height: 500,\r\n    });\r\n    this.patternDraws = {\r\n      [PATTERN_TYPES.PLAIN]: createPlainDraw(regl, this.fbo),\r\n      [PATTERN_TYPES.PULSE]: createPulseDraw(regl, this.fbo),\r\n      [PATTERN_TYPES.RADAR]: createRadarDraw(regl, this.fbo),\r\n    };\r\n    this.patterns = {};\r\n    this.regl = regl;\r\n    this.maxCategories = 0;\r\n    this.atlasSize = [0, 0];\r\n  }\r\n\r\n  updateSize() {\r\n    this.maxCategories = Math.max(...Object.keys(this.patterns)) + 1;\r\n    this.atlasSize = [this.maxCategories, 1];\r\n  }\r\n\r\n  // Input: array of pattern options with the category as a property\r\n  setAll(patterns) {\r\n    const categoriesToRemove = new Set(Object.keys(this.patterns));\r\n\r\n    patterns.forEach((pattern) => {\r\n      categoriesToRemove.delete(pattern.category.toString());\r\n      this.set(pattern.category, pattern);\r\n    });\r\n\r\n    categoriesToRemove.forEach((category) => {\r\n      this.destroy(category);\r\n    });\r\n\r\n  }\r\n\r\n  set(category, options) {\r\n    if (_has(this.patterns, category))\r\n      this.patterns[category] = { ...this.patterns[category], ...options };\r\n    else\r\n      this.patterns[category] = options;\r\n\r\n    this.updateSize();\r\n  }\r\n\r\n  destroy(category) {\r\n    delete this.patterns[category];\r\n    this.updateSize();\r\n  }\r\n\r\n  draw(time) {\r\n    for (let i = 0; i < this.maxCategories; i += 1) {\r\n      if (!_has(this.patterns, i)) continue;\r\n\r\n      this.patternDraws[this.patterns[i].type](this.fbo, this.atlasSize, i, time, this.patterns[i]);\r\n    }\r\n  }\r\n\r\n  clear() {\r\n    this.regl.clear({\r\n      color: [0, 0, 0, 0],\r\n      depth: 1,\r\n      framebuffer: this.fbo,\r\n    });\r\n  }\r\n\r\n  getTexture() {\r\n    return this.fbo.color[0];\r\n  }\r\n\r\n  getAtlasSize() {\r\n    return [...this.atlasSize];\r\n  }\r\n\r\n  // get(category) ?\r\n}\r\n","import vert from '../pattern.vert';\r\nimport frag from './plain.frag';\r\n\r\nexport default function createPlainDraw(regl, fbo) { \r\n  const drawFn = regl({\r\n    frag: frag,\r\n    vert: vert,\r\n    attributes: {\r\n      position: regl.buffer([\r\n        [-1, -1],\r\n        [1, -1],\r\n        [-1, 1],\r\n        [1, -1],\r\n        [-1, 1],\r\n        [1, 1],\r\n      ]),\r\n    },\r\n    uniforms: {\r\n      resolution: regl.prop('resolution'),\r\n      texAtlasIndex: regl.prop('texAtlasIndex'),\r\n      texAtlasSize: regl.prop('texAtlasSize'),\r\n      time: regl.prop('time'),\r\n      color: regl.prop('color'),\r\n    },\r\n    count: 6,\r\n    framebuffer: fbo,\r\n  });\r\n\r\n  return (fbo, atlasSize, atlasIndex, time, { color }) => {\r\n    drawFn({\r\n      resolution: [fbo.width, fbo.height],\r\n      texAtlasSize: atlasSize,\r\n      texAtlasIndex: atlasIndex,\r\n      time: (time * 0.5) % 1,\r\n      color: color,\r\n    });\r\n  };\r\n}\r\n","export default \"precision mediump float;\\n#define GLSLIFY 1\\n\\nuniform vec2 resolution;\\nuniform vec4 color;\\n\\nvarying vec2 posMin;\\nvarying vec2 posMax;\\n\\nvec2 normalizeFragCoords() {\\n  return (gl_FragCoord.xy / (resolution) - posMin) / (posMax - posMin); \\n}\\n\\nvoid main () {\\n  vec2 normalizedFragCoord = normalizeFragCoords();\\n\\n  vec2 center = vec2(0.5, 0.5);\\n\\n  float dist = distance(normalizedFragCoord, center) * 2.0;\\n  dist = pow(dist, 0.5);\\n\\n  gl_FragColor = vec4((1.0 - dist) * color.rgb, 1);\\n}\\n\";","export const COLOR_ACTIVE_IDX = 1;\nexport const COLOR_BG_IDX = 3;\nexport const COLOR_HOVER_IDX = 2;\nexport const COLOR_NORMAL_IDX = 0;\nexport const COLOR_NUM_STATES = 4;\nexport const FLOAT_BYTES = Float32Array.BYTES_PER_ELEMENT;\nexport const GL_EXTENSIONS = ['OES_standard_derivatives', 'OES_texture_float'];\nexport const LASSO_MIN_DELAY = 10;\nexport const LASSO_MIN_DIST = 3;\n\n// Default attribute\nexport const DEFAULT_DATA_ASPECT_RATIO = 1;\nexport const DEFAULT_WIDTH = 100;\nexport const DEFAULT_HEIGHT = 100;\n\n// Default styles\nexport const DEFAULT_POINT_SIZE = 6;\nexport const DEFAULT_POINT_SIZE_SELECTED = 2;\nexport const DEFAULT_POINT_OUTLINE_WIDTH = 2;\n\n// Default colors\nexport const DEFAULT_COLORMAP = [];\nexport const DEFAULT_COLOR_BY = null;\nexport const DEFAULT_COLOR_NORMAL = [0.66, 0.66, 0.66, 1];\nexport const DEFAULT_COLOR_ACTIVE = [0, 0.55, 1, 1];\nexport const DEFAULT_COLOR_HOVER = [1, 1, 1, 1];\nexport const DEFAULT_COLOR_BG = [0, 0, 0, 1];\nexport const DEFAULT_COLORS = [\n  DEFAULT_COLOR_NORMAL,\n  DEFAULT_COLOR_ACTIVE,\n  DEFAULT_COLOR_HOVER,\n  DEFAULT_COLOR_BG\n];\n\n// Default view\nexport const DEFAULT_TARGET = [0, 0];\nexport const DEFAULT_DISTANCE = 1;\nexport const DEFAULT_ROTATION = 0;\n// prettier-ignore\nexport const DEFAULT_VIEW = new Float32Array([\n  1, 0, 0, 0,\n  0, 1, 0, 0,\n  0, 0, 1, 0,\n  0, 0, 0, 1\n]);\n\n// Default misc\nexport const DEFAULT_BACKGROUND_IMAGE = null;\nexport const DEFAULT_LASSO_COLOR = [0, 0.666666667, 1, 1];\nexport const DEFAULT_SHOW_RECTICLE = false;\nexport const DEFAULT_RECTICLE_COLOR = [1, 1, 1, 0.5];\n","import createOriginalRegl from 'regl';\n\nimport { GL_EXTENSIONS } from './constants';\n\n/**\n * Get the max value of an array. helper method to be used with `Array.reduce()`.\n * @param   {number}  max  Accumulator holding the max value.\n * @param   {number}  x  Current value.\n * @return  {number}  Max value.\n */\nexport const arrayMax = (max, x) => (max > x ? max : x);\n\n/**\n * Check if all GL extensions are enabled and warn otherwise\n * @param   {function}  regl  Regl instance to be tested\n * @return  {function}  Returns the Regl instance itself\n */\nexport const checkReglExtensions = regl => {\n  if (!regl) return false;\n  return GL_EXTENSIONS.reduce((every, EXTENSION) => {\n    if (!regl.hasExtension(EXTENSION)) {\n      console.warn(\n        `WebGL: ${EXTENSION} extension not supported. Scatterplot might not render properly`\n      );\n      return false;\n    }\n    return every;\n  }, true);\n};\n\n/**\n * Create a new Regl instance with `GL_EXTENSIONS` enables\n * @param   {object}  canvas  Canvas element to be rendered on\n * @return  {function}  New Regl instance\n */\nexport const createRegl = canvas => {\n  const gl = canvas.getContext('webgl');\n  const extensions = [];\n\n  // Needed to run the tests properly as the headless-gl doesn't support all\n  // extensions, which is fine for the functional tests.\n  GL_EXTENSIONS.forEach(EXTENSION => {\n    if (gl.getExtension(EXTENSION)) {\n      extensions.push(EXTENSION);\n    } else {\n      console.warn(\n        `WebGL: ${EXTENSION} extension not supported. Scatterplot might not render properly`\n      );\n    }\n  });\n\n  return createOriginalRegl({ gl, extensions });\n};\n\n/**\n * L2 distance between a pair of 2D points\n * @param   {number}  x1  X coordinate of the first point\n * @param   {number}  y1  Y coordinate of the first point\n * @param   {number}  x2  X coordinate of the second point\n * @param   {number}  y2  Y coordinate of the first point\n * @return  {number}  L2 distance\n */\nexport const dist = (x1, y1, x2, y2) =>\n  Math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2);\n\n/**\n * Get the bounding box of a set of 2D positions\n * @param   {array}  positions2d  2D positions to be checked\n * @return  {array}  Quadruple of form `[xMin, yMin, xMax, yMax]` defining the\n *  bounding box\n */\nexport const getBBox = positions2d => {\n  let xMin = Infinity;\n  let xMax = -Infinity;\n  let yMin = Infinity;\n  let yMax = -Infinity;\n\n  for (let i = 0; i < positions2d.length; i += 2) {\n    xMin = positions2d[i] < xMin ? positions2d[i] : xMin;\n    xMax = positions2d[i] > xMax ? positions2d[i] : xMax;\n    yMin = positions2d[i + 1] < yMin ? positions2d[i + 1] : yMin;\n    yMax = positions2d[i + 1] > yMax ? positions2d[i + 1] : yMax;\n  }\n\n  return [xMin, yMin, xMax, yMax];\n};\n\n/**\n * Convert a HEX-encoded color to an RGB-encoded color\n * @param   {string}  hex  HEX-encoded color string.\n * @param   {boolean}  isNormalize  If `true` the returned RGB values will be\n *   normalized to `[0,1]`.\n * @return  {array}  Triple holding the RGB values.\n */\nexport const hexToRgb = (hex, isNormalize = false) =>\n  hex\n    .replace(\n      /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i,\n      (m, r, g, b) => `#${r}${r}${g}${g}${b}${b}`\n    )\n    .substring(1)\n    .match(/.{2}/g)\n    .map(x => parseInt(x, 16) / 255 ** isNormalize);\n\n/**\n * Promised-based image loading\n * @param   {string}  src  Remote image source, i.e., a URL\n * @return  {object}  Promise resolving to the image once its loaded\n */\nexport const loadImage = (src, isCrossOrigin = false) =>\n  new Promise((accept, reject) => {\n    const image = new Image();\n    if (isCrossOrigin) image.crossOrigin = 'anonymous';\n    image.src = src;\n    image.onload = () => {\n      accept(image);\n    };\n    image.onerror = error => {\n      reject(error);\n    };\n  });\n\n/**\n * Create a Regl texture from an URL.\n * @param   {function}  regl  Regl instance used for creating the texture.\n * @param   {string}  url  Source URL of the image.\n * @param   {boolean}  isCrossOrigin  If `true` allow loading image from a\n *   source of another origin.\n * @return  {object}  Promise resolving to the texture object.\n */\nexport const createTextureFromUrl = (regl, url, isCrossOrigin = false) =>\n  new Promise((resolve, reject) => {\n    loadImage(url, isCrossOrigin)\n      .then(image => {\n        resolve(regl.texture(image));\n      })\n      .catch(error => {\n        reject(error);\n      });\n  });\n\n/**\n * Convert a HEX-encoded color to an RGBA-encoded color\n * @param   {string}  hex  HEX-encoded color string.\n * @param   {boolean}  isNormalize  If `true` the returned RGBA values will be\n *   normalized to `[0,1]`.\n * @return  {array}  Triple holding the RGBA values.\n */\nexport const hexToRgba = (hex, isNormalize = false) => [\n  ...hexToRgb(hex, isNormalize),\n  255 ** !isNormalize\n];\n\n/**\n * Tests if a string is a valid HEX color encoding\n * @param   {string}  hex  HEX-encoded color string.\n * @return  {boolean}  If `true` the string is a valid HEX color encoding.\n */\nexport const isHex = hex => /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(hex);\n\n/**\n * Tests if a number is in `[0,1]`.\n * @param   {number}  x  Number to be tested.\n * @return  {boolean}  If `true` the number is in `[0,1]`.\n */\nexport const isNormFloat = x => x >= 0 && x <= 1;\n\n/**\n * Tests if an array consist of normalized numbers that are in `[0,1]` only.\n * @param   {array}  a  Array to be tested\n * @return  {boolean}  If `true` the array contains only numbers in `[0,1]`.\n */\nexport const isNormFloatArray = a => Array.isArray(a) && a.every(isNormFloat);\n\n/**\n * From: https://wrf.ecse.rpi.edu//Research/Short_Notes/pnpoly.html\n * @param   {Array}  point  Tuple of the form `[x,y]` to be tested.\n * @param   {Array}  polygon  1D list of vertices defining the polygon.\n * @return  {boolean}  If `true` point lies within the polygon.\n */\nexport const isPointInPolygon = ([px, py] = [], polygon) => {\n  let x1;\n  let y1;\n  let x2;\n  let y2;\n  let isWithin = false;\n  for (let i = 0, j = polygon.length - 2; i < polygon.length; i += 2) {\n    x1 = polygon[i];\n    y1 = polygon[i + 1];\n    x2 = polygon[j];\n    y2 = polygon[j + 1];\n    if ((y1 > py) !== (y2 > py) && px < ((x2 - x1) * (py - y1)) / (y2 - y1) + x1)\n      isWithin = !isWithin;\n    j = i;\n  }\n  return isWithin;\n};\n\n/**\n * Tests if a variable is a string\n * @param   {*}  s  Variable to be tested\n * @return  {boolean}  If `true` variable is a string\n */\nexport const isString = s => typeof s === 'string' || s instanceof String;\n\n/**\n * Tests if a number is an interger and in `[0,255]`.\n * @param   {number}  x  Number to be tested.\n * @return  {boolean}  If `true` the number is an interger and in `[0,255]`.\n */\nexport const isUint8 = x => Number.isInteger(x) && x >= 0 && x <= 255;\n\n/**\n * Tests if an array consist of Uint8 numbers only.\n * @param   {array}  a  Array to be tested.\n * @return  {boolean}  If `true` the array contains only Uint8 numbers.\n */\nexport const isUint8Array = a => Array.isArray(a) && a.every(isUint8);\n\n/**\n * Tests if an array is encoding an RGB color.\n * @param   {array}  rgb  Array to be tested\n * @return  {boolean}  If `true` the array hold a triple of Uint8 numbers or\n *   a triple of normalized floats.\n */\nexport const isRgb = rgb =>\n  rgb.length === 3 && (isNormFloatArray(rgb) || isUint8Array(rgb));\n\n/**\n * Tests if an array is encoding an RGBA color.\n * @param   {array}  rgb  Array to be tested\n * @return  {boolean}  If `true` the array hold a quadruple of Uint8 numbers or\n *   a quadruple of normalized floats.\n */\nexport const isRgba = rgba =>\n  rgba.length === 4 && (isNormFloatArray(rgba) || isUint8Array(rgba));\n\n/**\n * Fast version of `Math.max`. Based on\n *   https://jsperf.com/math-min-max-vs-ternary-vs-if/24 `Math.max` is not\n *   very fast\n * @param   {number}  a  Value A\n * @param   {number}  b  Value B\n * @return  {boolean}  If `true` A is greater than B.\n */\nexport const max = (a, b) => (a > b ? a : b);\n\n/**\n * Fast version of `Math.min`. Based on\n *   https://jsperf.com/math-min-max-vs-ternary-vs-if/24 `Math.max` is not\n *   very fast\n * @param   {number}  a  Value A\n * @param   {number}  b  Value B\n * @return  {boolean}  If `true` A is smaller than B.\n */\nexport const min = (a, b) => (a < b ? a : b);\n\n/**\n * Normalize an array\n * @param   {array}  a  Array to be normalized.\n * @return  {array}  Normalized array.\n */\nexport const normNumArray = a => a.map(x => x / a.reduce(arrayMax, -Infinity));\n\n/**\n * Convert a color to an RGBA color\n * @param   {*}  color  Color to be converted. Currently supports:\n *   HEX, RGB, or RGBA.\n * @param   {boolean}  isNormalize  If `true` the returned RGBA values will be\n *   normalized to `[0,1]`.\n * @return  {array}  Quadruple defining an RGBA color.\n */\nexport const toRgba = (color, isNormalize) => {\n  if (isRgba(color))\n    return isNormalize && !isNormFloatArray(color)\n      ? normNumArray(color)\n      : color;\n  if (isRgb(color))\n    return [\n      ...(isNormalize ? normNumArray(color) : color),\n      255 ** !isNormalize\n    ];\n  if (isHex(color)) return hexToRgba(color, isNormalize);\n  console.warn(\n    'Only HEX, RGB, and RGBA are handled by this function. Returning white instead.'\n  );\n  return isNormalize ? [1, 1, 1, 1] : [255, 255, 255, 255];\n};\n","import createDom2dCamera from './camera';\r\nimport KDBush from 'kdbush';\r\nimport createPubSub from 'pub-sub-es';\r\nimport withThrottle from 'lodash-es/throttle';\r\nimport withRaf from 'with-raf';\r\nimport { mat4, vec4 } from 'gl-matrix';\r\nimport createLine from 'regl-line';\r\nimport GLBench from 'gl-bench/dist/gl-bench';\r\nimport _groupBy from 'lodash-es/groupBy';\r\nimport _has from 'lodash-es/has';\r\nimport _mapValues from 'lodash-es/mapValues';\r\n\r\nimport BG_FS from './bg.frag';\r\nimport BG_VS from './bg.vert';\r\nimport POINT_FS from './point.frag';\r\nimport POINT_VS from './point.vert';\r\n\r\nimport PatternManager, { PATTERN_TYPES } from './patterns/PatternManager';\r\n\r\nimport {\r\n  COLOR_ACTIVE_IDX,\r\n  COLOR_BG_IDX,\r\n  COLOR_HOVER_IDX,\r\n  COLOR_NORMAL_IDX,\r\n  COLOR_NUM_STATES,\r\n  DEFAULT_BACKGROUND_IMAGE,\r\n  DEFAULT_COLOR_BG,\r\n  DEFAULT_COLOR_BY,\r\n  DEFAULT_COLORS,\r\n  DEFAULT_DATA_ASPECT_RATIO,\r\n  DEFAULT_DISTANCE,\r\n  DEFAULT_HEIGHT,\r\n  DEFAULT_LASSO_COLOR,\r\n  DEFAULT_SHOW_RECTICLE,\r\n  DEFAULT_RECTICLE_COLOR,\r\n  DEFAULT_POINT_OUTLINE_WIDTH,\r\n  DEFAULT_POINT_SIZE,\r\n  DEFAULT_POINT_SIZE_SELECTED,\r\n  DEFAULT_ROTATION,\r\n  DEFAULT_TARGET,\r\n  DEFAULT_VIEW,\r\n  DEFAULT_WIDTH,\r\n  FLOAT_BYTES,\r\n  LASSO_MIN_DELAY,\r\n  LASSO_MIN_DIST\r\n} from './constants';\r\n\r\nimport {\r\n  checkReglExtensions,\r\n  createRegl,\r\n  createTextureFromUrl,\r\n  dist,\r\n  getBBox,\r\n  isRgb,\r\n  isPointInPolygon,\r\n  isRgba,\r\n  toRgba,\r\n  max,\r\n  min\r\n} from './utils';\r\n\r\n//import { version } from '../package.json';\r\nconst version = '0.7.5';\r\n\r\nconst createScatterplot = ({\r\n  regl: initialRegl,\r\n  background: initialBackground = DEFAULT_COLOR_BG,\r\n  backgroundImage: initialBackgroundImage = DEFAULT_BACKGROUND_IMAGE,\r\n  canvas: initialCanvas = document.createElement('canvas'),\r\n  colorBy: initialColorBy = DEFAULT_COLOR_BY,\r\n  colors: initialColors = DEFAULT_COLORS,\r\n  lassoColor: initialLassoColor = DEFAULT_LASSO_COLOR,\r\n  lassoMinDelay: initialLassoMinDelay = LASSO_MIN_DELAY,\r\n  lassoMinDist: initialLassoMinDist = LASSO_MIN_DIST,\r\n  showRecticle: initialShowRecticle = DEFAULT_SHOW_RECTICLE,\r\n  recticleColor: initialRecticleColor = DEFAULT_RECTICLE_COLOR,\r\n  pointSize: initialPointSize = DEFAULT_POINT_SIZE,\r\n  pointSizeSelected: initialPointSizeSelected = DEFAULT_POINT_SIZE_SELECTED,\r\n  pointOutlineWidth: initialPointOutlineWidth = DEFAULT_POINT_OUTLINE_WIDTH,\r\n  width: initialWidth = DEFAULT_WIDTH,\r\n  height: initialHeight = DEFAULT_HEIGHT,\r\n  target: initialTarget = DEFAULT_TARGET,\r\n  distance: initialDistance = DEFAULT_DISTANCE,\r\n  rotation: initialRotation = DEFAULT_ROTATION,\r\n  view: initialView = DEFAULT_VIEW\r\n} = {}) => {\r\n  const pubSub = createPubSub();\r\n  const scratch = new Float32Array(16);\r\n  const mousePosition = [0, 0];\r\n\r\n  checkReglExtensions(initialRegl);\r\n\r\n  let background = toRgba(initialBackground, true);\r\n  let backgroundImage = initialBackgroundImage;\r\n  let canvas = initialCanvas;\r\n  let colors = initialColors;\r\n  let width = initialWidth;\r\n  let height = initialHeight;\r\n  let pointSize = initialPointSize;\r\n  let pointSizeSelected = initialPointSizeSelected;\r\n  let pointOutlineWidth = initialPointOutlineWidth;\r\n  let regl = initialRegl || createRegl(initialCanvas);\r\n  let camera;\r\n  let lasso;\r\n  let mouseDown = false;\r\n  let mouseDownShift = false;\r\n  let mouseDownPosition = [0, 0];\r\n  let numPoints = 0;\r\n  let selection = [];\r\n  let lassoColor = toRgba(initialLassoColor, true);\r\n  let lassoMinDelay = +initialLassoMinDelay;\r\n  let lassoMinDist = +initialLassoMinDist;\r\n  let lassoPos = [];\r\n  let lassoScatterPos = [];\r\n  let lassoPrevMousePos;\r\n  let searchIndex;\r\n  let viewAspectRatio;\r\n  let dataAspectRatio = DEFAULT_DATA_ASPECT_RATIO;\r\n  let projection;\r\n  let model;\r\n  let showRecticle = initialShowRecticle;\r\n  let recticleHLine;\r\n  let recticleVLine;\r\n  let recticleColor = toRgba(initialRecticleColor, true);\r\n\r\n  let stateTex; // Stores the point texture holding x, y, category, and value\r\n  let stateTexRes = 0; // Width and height of the texture\r\n  let normalPointsIndexBuffer; // Buffer holding the indices pointing to the correct texel\r\n  let selectedPointsIndexBuffer; // Used for pointing to the selected texels\r\n  let hoveredPointIndexBuffer; // Used for pointing to the hovered texels\r\n\r\n  let colorTex; // Stores the color texture\r\n  let colorTexRes = 0; // Width and height of the texture\r\n\r\n  let colorBy = initialColorBy;\r\n  let isViewChanged = false;\r\n  let isInit = false;\r\n\r\n  let opacity = 1;\r\n\r\n  let hoveredPoint;\r\n  let isMouseInCanvas = false;\r\n\r\n  let bboxTex;\r\n  let bboxTexRes = 0;\r\n\r\n  let glBench;\r\n\r\n  let patternManager = new PatternManager(regl);\r\n  patternManager.set(0, {\r\n    type: PATTERN_TYPES.PLAIN,\r\n    color: [0.2, 1, 0.5, 1],\r\n  });\r\n\r\n  // Get a copy of the current mouse position\r\n  const getMousePos = () => mousePosition.slice();\r\n\r\n  const getNdcX = x => -1 + (x / width) * 2;\r\n\r\n  const getNdcY = y => 1 + (y / height) * -2;\r\n\r\n  // Get relative WebGL position\r\n  const getMouseGlPos = () => [\r\n    getNdcX(mousePosition[0]),\r\n    getNdcY(mousePosition[1])\r\n  ];\r\n\r\n  const getScatterGlPos = () => {\r\n    const [xGl, yGl] = getMouseGlPos();\r\n\r\n    // Homogeneous vector\r\n    const v = [xGl, yGl, 1, 1];\r\n\r\n    // projection^-1 * view^-1 * model^-1 is the same as\r\n    // model * view^-1 * projection\r\n    const mvp = mat4.invert(\r\n      scratch,\r\n      mat4.multiply(\r\n        scratch,\r\n        projection,\r\n        mat4.multiply(scratch, camera.view, model)\r\n      )\r\n    );\r\n\r\n    // Translate vector\r\n    vec4.transformMat4(v, v, mvp);\r\n\r\n    return v.slice(0, 2);\r\n  };\r\n\r\n  const raycast = () => {\r\n    const [x, y] = getScatterGlPos();\r\n\r\n    const scaling = camera.scaling;\r\n    const scaledPointSize =\r\n      2 *\r\n      pointSize *\r\n      (min(1.0, scaling) + Math.log2(max(1.0, scaling))) *\r\n      window.devicePixelRatio;\r\n\r\n    const xNormalizedScaledPointSize = scaledPointSize / width;\r\n    const yNormalizedScaledPointSize = scaledPointSize / height;\r\n\r\n    // Get all points within a close range\r\n    const pointsInBBox = searchIndex.range(\r\n      x - xNormalizedScaledPointSize,\r\n      y - yNormalizedScaledPointSize,\r\n      x + xNormalizedScaledPointSize,\r\n      y + yNormalizedScaledPointSize\r\n    );\r\n\r\n    // Find the closest point\r\n    let minDist = scaledPointSize;\r\n    let clostestPoint;\r\n    pointsInBBox.forEach(idx => {\r\n      const [ptX, ptY] = searchIndex.points[idx];\r\n      const d = dist(ptX, ptY, x, y);\r\n      if (d < minDist) {\r\n        minDist = d;\r\n        clostestPoint = idx;\r\n      }\r\n    });\r\n\r\n    if (minDist < (pointSize / width) * 2) return clostestPoint;\r\n    return -1;\r\n  };\r\n\r\n  const lassoExtend = () => {\r\n    const currMousePos = getMousePos();\r\n\r\n    if (!lassoPrevMousePos) {\r\n      lassoPos = [...getMouseGlPos(currMousePos)];\r\n      lassoScatterPos = [...getScatterGlPos(currMousePos)];\r\n      lassoPrevMousePos = currMousePos;\r\n    } else {\r\n      const d = dist(...currMousePos, ...lassoPrevMousePos);\r\n\r\n      if (d > lassoMinDist) {\r\n        lassoPos.push(...getMouseGlPos(currMousePos));\r\n        lassoScatterPos.push(...getScatterGlPos(currMousePos));\r\n        lassoPrevMousePos = currMousePos;\r\n        if (lassoPos.length > 2) {\r\n          lasso.setPoints(lassoPos);\r\n        }\r\n      }\r\n    }\r\n  };\r\n  let lassoExtendDb = withThrottle(lassoExtend, lassoMinDelay);\r\n\r\n  const findPointsInLasso = lassoPolygon => {\r\n    // get the bounding box of the lasso selection...\r\n    const bBox = getBBox(lassoPolygon);\r\n    // ...to efficiently preselect potentially selected points\r\n    const pointsInBBox = searchIndex.range(...bBox);\r\n    // next we test each point in the bounding box if it is in the polygon too\r\n    const pointsInPolygon = [];\r\n    pointsInBBox.forEach(pointIdx => {\r\n      if (isPointInPolygon(searchIndex.points[pointIdx], lassoPolygon))\r\n        pointsInPolygon.push(pointIdx);\r\n    });\r\n\r\n    return pointsInPolygon;\r\n  };\r\n\r\n  const deselect = () => {\r\n    if (selection.length) {\r\n      pubSub.publish('deselect');\r\n      selection = [];\r\n      //drawRaf(); // eslint-disable-line no-use-before-define\r\n    }\r\n  };\r\n\r\n  const select = points => {\r\n    selection = points;\r\n\r\n    selectedPointsIndexBuffer({\r\n      usage: 'dynamic',\r\n      type: 'float',\r\n      data: new Float32Array(selection)\r\n    });\r\n\r\n    pubSub.publish('select', {\r\n      points: selection\r\n    });\r\n\r\n    //drawRaf(); // eslint-disable-line no-use-before-define\r\n  };\r\n\r\n  const getRelativeMousePosition = event => {\r\n    const rect = canvas.getBoundingClientRect();\r\n\r\n    mousePosition[0] = event.clientX - rect.left;\r\n    mousePosition[1] = event.clientY - rect.top;\r\n\r\n    return [...mousePosition];\r\n  };\r\n\r\n  const lassoEnd = () => {\r\n    // const t0 = performance.now();\r\n    const pointsInLasso = findPointsInLasso(lassoScatterPos);\r\n    // console.log(`found ${pointsInLasso.length} in ${performance.now() - t0} msec`);\r\n    select(pointsInLasso);\r\n    lassoPos = [];\r\n    lassoScatterPos = [];\r\n    lassoPrevMousePos = undefined;\r\n    lasso.clear();\r\n  };\r\n\r\n  const mouseDownHandler = event => {\r\n    if (!isInit) return;\r\n\r\n    mouseDown = true;\r\n\r\n    mouseDownPosition = getRelativeMousePosition(event);\r\n    mouseDownShift = event.shiftKey;\r\n\r\n    if (mouseDownShift) {\r\n      // Fix camera for the lasso selection\r\n      camera.config({ isFixed: true });\r\n      // Make sure we start a new lasso selection\r\n      lassoPrevMousePos = undefined;\r\n    }\r\n  };\r\n\r\n  const mouseUpHandler = () => {\r\n    if (!isInit) return;\r\n\r\n    mouseDown = false;\r\n\r\n    if (mouseDownShift) {\r\n      mouseDownShift = false;\r\n      camera.config({ isFixed: false });\r\n      lassoEnd();\r\n    }\r\n  };\r\n\r\n  const mouseClickHandler = event => {\r\n    if (!isInit) return;\r\n\r\n    const currentMousePosition = getRelativeMousePosition(event);\r\n    const clickDist = dist(...currentMousePosition, ...mouseDownPosition);\r\n\r\n    if (clickDist >= LASSO_MIN_DIST) return;\r\n\r\n    const clostestPoint = raycast();\r\n    if (clostestPoint >= 0) select([clostestPoint]);\r\n  };\r\n\r\n  const mouseDblClickHandler = () => {\r\n    deselect();\r\n  };\r\n\r\n  const mouseMoveHandler = event => {\r\n    if (!isInit) return;\r\n\r\n    getRelativeMousePosition(event);\r\n\r\n    // Only ray cast if the mouse cursor is inside\r\n    if (isMouseInCanvas && !mouseDownShift) {\r\n      const clostestPoint = raycast();\r\n      hover(clostestPoint); // eslint-disable-line no-use-before-define\r\n    }\r\n\r\n    if (mouseDownShift) lassoExtendDb();\r\n\r\n    // Always redraw when mouse as the user might have panned or lassoed\r\n    //if (mouseDown) drawRaf(); // eslint-disable-line no-use-before-define\r\n  };\r\n\r\n  const blurHandler = () => {\r\n    if (!isInit) return;\r\n\r\n    hoveredPoint = undefined;\r\n    isMouseInCanvas = false;\r\n    mouseUpHandler();\r\n    //drawRaf(); // eslint-disable-line no-use-before-define\r\n  };\r\n\r\n  const createColorTexture = (newColors = colors) => {\r\n    const numColors = newColors.length;\r\n    colorTexRes = Math.max(2, Math.ceil(Math.sqrt(numColors)));\r\n    const rgba = new Float32Array(colorTexRes ** 2 * 4);\r\n    newColors.forEach((color, i) => {\r\n      rgba[i * 4] = color[0]; // r\r\n      rgba[i * 4 + 1] = color[1]; // g\r\n      rgba[i * 4 + 2] = color[2]; // b\r\n      // For all normal state colors check if the global opacity is not 1 and\r\n      // if so use that instead.\r\n      rgba[i * 4 + 3] =\r\n        i % COLOR_NUM_STATES > 0 || opacity === 1 ? color[3] : opacity; // a\r\n    });\r\n\r\n    return regl.texture({\r\n      data: rgba,\r\n      shape: [colorTexRes, colorTexRes, 4],\r\n      type: 'float'\r\n    });\r\n  };\r\n\r\n  const updateViewAspectRatio = () => {\r\n    viewAspectRatio = width / height;\r\n    projection = mat4.fromScaling([], [1 / viewAspectRatio, 1, 1]);\r\n    model = mat4.fromScaling([], [dataAspectRatio, 1, 1]);\r\n  };\r\n\r\n  const setDataAspectRatio = newDataAspectRatio => {\r\n    if (+newDataAspectRatio <= 0) return;\r\n    dataAspectRatio = newDataAspectRatio;\r\n  };\r\n\r\n  const setColors = newColors => {\r\n    if (!newColors || !newColors.length) return;\r\n\r\n    const tmp = [];\r\n    try {\r\n      newColors.forEach(color => {\r\n        if (Array.isArray(color) && !isRgb(color) && !isRgba(color)) {\r\n          // Assuming color is an array of HEX colors\r\n          for (let j = 0; j < 3; j++) {\r\n            tmp.push(toRgba(color[j], true));\r\n          }\r\n        } else {\r\n          const rgba = toRgba(color, true);\r\n          const rgbaOpaque = [...rgba.slice(0, 3), 1];\r\n          tmp.push(rgba, rgbaOpaque, rgbaOpaque); // normal, active, and hover\r\n        }\r\n        tmp.push(background);\r\n      });\r\n    } catch (e) {\r\n      console.error(\r\n        e,\r\n        'Invalid format. Please specify an array of colors or a nested array of accents per colors.'\r\n      );\r\n    }\r\n    colors = tmp;\r\n\r\n    try {\r\n      colorTex = createColorTexture();\r\n    } catch (e) {\r\n      colors = DEFAULT_COLORS;\r\n      colorTex = createColorTexture();\r\n      console.error('Invalid colors. Switching back to default colors.');\r\n    }\r\n  };\r\n  const setHeight = newHeight => {\r\n    if (!+newHeight || +newHeight <= 0) return;\r\n    height = +newHeight;\r\n    canvas.height = height * window.devicePixelRatio;\r\n  };\r\n\r\n  const setPointSize = newPointSize => {\r\n    if (!+newPointSize || +newPointSize <= 0) return;\r\n    pointSize = +newPointSize;\r\n  };\r\n\r\n  const setPointSizeSelected = newPointSizeSelected => {\r\n    if (!+newPointSizeSelected || +newPointSizeSelected < 0) return;\r\n    pointSizeSelected = +newPointSizeSelected;\r\n  };\r\n\r\n  const setPointOutlineWidth = newPointOutlineWidth => {\r\n    if (!+newPointOutlineWidth || +newPointOutlineWidth < 0) return;\r\n    pointOutlineWidth = +newPointOutlineWidth;\r\n  };\r\n\r\n  const setWidth = newWidth => {\r\n    if (!+newWidth || +newWidth <= 0) return;\r\n    width = +newWidth;\r\n    canvas.width = width * window.devicePixelRatio;\r\n  };\r\n\r\n  const setColorBy = type => {\r\n    switch (type) {\r\n      case 'category':\r\n        colorBy = 'category';\r\n        break;\r\n\r\n      case 'value':\r\n        colorBy = 'value';\r\n        break;\r\n\r\n      default:\r\n        colorBy = DEFAULT_COLOR_BY;\r\n    }\r\n  };\r\n\r\n  const setOpacity = newOpacity => {\r\n    if (!+newOpacity || +newOpacity <= 0) return;\r\n\r\n    opacity = +newOpacity;\r\n    colorTex = createColorTexture();\r\n  };\r\n\r\n  const getBackgroundImage = () => backgroundImage;\r\n  const getColorTex = () => colorTex;\r\n  const getColorTexRes = () => colorTexRes;\r\n  const getNormalPointsIndexBuffer = () => normalPointsIndexBuffer;\r\n  const getSelectedPointsIndexBuffer = () => selectedPointsIndexBuffer;\r\n  const getPointSize = () => pointSize * window.devicePixelRatio;\r\n  const getNormalPointSizeExtra = () => 0;\r\n  const getStateTex = () => stateTex;\r\n  const getStateTexRes = () => stateTexRes;\r\n  const getProjection = () => projection;\r\n  const getView = () => camera.view;\r\n  const getModel = () => model;\r\n  const getScaling = () => camera.scaling;\r\n  const getNormalNumPoints = () => numPoints;\r\n  const getIsColoredByCategory = () => (colorBy === 'category') * 1;\r\n  const getIsColoredByValue = () => (colorBy === 'value') * 1;\r\n  const getMaxColor = () => colors.length / COLOR_NUM_STATES - 1;\r\n  const getNumColorStates = () => COLOR_NUM_STATES;\r\n  const getTexture = () => patternManager.getTexture();\r\n  const getAtlasSize = () => patternManager.getAtlasSize();\r\n  const getBBoxTex = () => bboxTex;\r\n  const getBBoxTexRes = () => bboxTexRes;\r\n\r\n  const drawPoints = (\r\n    getPointSizeExtra,\r\n    getNumPoints,\r\n    getStateIndexBuffer,\r\n    globalState = COLOR_NORMAL_IDX\r\n  ) =>\r\n    regl({\r\n      frag: POINT_FS,\r\n      vert: POINT_VS,\r\n\r\n      blend: {\r\n        enable: true,\r\n        func: {\r\n          srcRGB: 'src alpha',\r\n          srcAlpha: 'one',\r\n          dstRGB: 'one minus src alpha',\r\n          dstAlpha: 'one minus src alpha'\r\n        }\r\n      },\r\n\r\n      depth: { enable: false },\r\n\r\n      attributes: {\r\n        stateIndex: {\r\n          buffer: getStateIndexBuffer,\r\n          size: 1\r\n        }\r\n      },\r\n\r\n      uniforms: {\r\n        projection: getProjection,\r\n        model: getModel,\r\n        view: getView,\r\n        scaling: getScaling,\r\n        pointSize: getPointSize,\r\n        pointSizeExtra: getPointSizeExtra,\r\n        globalState,\r\n        colorTex: getColorTex,\r\n        colorTexRes: getColorTexRes,\r\n        stateTex: getStateTex,\r\n        stateTexRes: getStateTexRes,\r\n        isColoredByCategory: getIsColoredByCategory,\r\n        isColoredByValue: getIsColoredByValue,\r\n        maxColor: getMaxColor,\r\n        numColorStates: getNumColorStates,\r\n        textureAtlas: getTexture,\r\n        atlasSize: getAtlasSize,\r\n        bboxTex: getBBoxTex,\r\n        bboxTexRes: getBBoxTexRes,\r\n      },\r\n\r\n      count: getNumPoints,\r\n\r\n      primitive: 'points'\r\n    });\r\n\r\n  const drawPointBodies = drawPoints(\r\n    getNormalPointSizeExtra,\r\n    getNormalNumPoints,\r\n    getNormalPointsIndexBuffer\r\n  );\r\n\r\n  const drawHoveredPoint = drawPoints(\r\n    getNormalPointSizeExtra,\r\n    () => 1,\r\n    () => hoveredPointIndexBuffer,\r\n    COLOR_HOVER_IDX\r\n  );\r\n\r\n  const drawSelectedPoint = () => {\r\n    const numOutlinedPoints = selection.length;\r\n\r\n    // Draw outer outline\r\n    drawPoints(\r\n      () =>\r\n        (pointSizeSelected + pointOutlineWidth * 2) * window.devicePixelRatio,\r\n      () => numOutlinedPoints,\r\n      getSelectedPointsIndexBuffer,\r\n      COLOR_ACTIVE_IDX\r\n    )();\r\n\r\n    // Draw inner outline\r\n    drawPoints(\r\n      () => (pointSizeSelected + pointOutlineWidth) * window.devicePixelRatio,\r\n      () => numOutlinedPoints,\r\n      getSelectedPointsIndexBuffer,\r\n      COLOR_BG_IDX\r\n    )();\r\n\r\n    // Draw body\r\n    drawPoints(\r\n      () => pointSizeSelected,\r\n      () => numOutlinedPoints,\r\n      getSelectedPointsIndexBuffer,\r\n      COLOR_ACTIVE_IDX\r\n    )();\r\n  };\r\n\r\n  const drawBackgroundImage = regl({\r\n    frag: BG_FS,\r\n    vert: BG_VS,\r\n\r\n    attributes: {\r\n      position: [0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0]\r\n    },\r\n\r\n    uniforms: {\r\n      projection: getProjection,\r\n      model: getModel,\r\n      view: getView,\r\n      texture: getBackgroundImage\r\n    },\r\n\r\n    count: 6\r\n  });\r\n\r\n  const drawRecticle = () => {\r\n    if (!(hoveredPoint >= 0)) return;\r\n\r\n    const [x, y] = searchIndex.points[hoveredPoint].slice(0, 2);\r\n\r\n    // Homogeneous coordinates of the point\r\n    const v = [x, y, 0, 1];\r\n\r\n    // We have to calculate the model-view-projection matrix outside of the\r\n    // shader as we actually don't want the mode, view, or projection of the\r\n    // line view space to change such that the recticle is visualized across the\r\n    // entire view container and not within the view of the scatterplot\r\n    mat4.multiply(\r\n      scratch,\r\n      projection,\r\n      mat4.multiply(scratch, camera.view, model)\r\n    );\r\n\r\n    vec4.transformMat4(v, v, scratch);\r\n\r\n    recticleHLine.setPoints([-1, v[1], 1, v[1]]);\r\n    recticleVLine.setPoints([v[0], 1, v[0], -1]);\r\n\r\n    recticleHLine.draw();\r\n    recticleVLine.draw();\r\n\r\n    // Draw outer outline\r\n    drawPoints(\r\n      () =>\r\n        (pointSizeSelected + pointOutlineWidth * 2) * window.devicePixelRatio,\r\n      () => 1,\r\n      hoveredPointIndexBuffer,\r\n      COLOR_ACTIVE_IDX\r\n    )();\r\n\r\n    // Draw inner outline\r\n    drawPoints(\r\n      () => (pointSizeSelected + pointOutlineWidth) * window.devicePixelRatio,\r\n      () => 1,\r\n      hoveredPointIndexBuffer,\r\n      COLOR_BG_IDX\r\n    )();\r\n  };\r\n\r\n  const createPointIndex = numNewPoints => {\r\n    const index = new Float32Array(numNewPoints);\r\n\r\n    for (let i = 0; i < numNewPoints; ++i) {\r\n      index[i] = i;\r\n    }\r\n\r\n    return index;\r\n  };\r\n\r\n  const createStateTexture = newPoints => {\r\n    const numNewPoints = newPoints.length;\r\n    stateTexRes = Math.max(2, Math.ceil(Math.sqrt(numNewPoints)));\r\n    const data = new Float32Array(stateTexRes ** 2 * 4);\r\n\r\n    for (let i = 0; i < numNewPoints; ++i) {\r\n      data[i * 4] = newPoints[i][0]; // x\r\n      data[i * 4 + 1] = newPoints[i][1]; // y\r\n      data[i * 4 + 2] = newPoints[i][2] || 0; // category\r\n      data[i * 4 + 3] = newPoints[i][3] || 0; // value\r\n    }\r\n\r\n    return regl.texture({\r\n      data,\r\n      shape: [stateTexRes, stateTexRes, 4],\r\n      type: 'float'\r\n    });\r\n  };\r\n\r\n  const createBBoxTexture = (bboxByCategory) => {\r\n    const numCategories = Math.max(...Object.keys(bboxByCategory)) + 1;\r\n    bboxTexRes = Math.max(2, Math.ceil(Math.sqrt(numCategories)));\r\n    const data = new Float32Array(bboxTexRes ** 2 * 4);\r\n    for (let i = 0; i < numCategories; i += 1) {\r\n      if (_has(bboxByCategory, i)) {\r\n        data[i * 4] = bboxByCategory[i][0];\r\n        data[i * 4 + 1] = bboxByCategory[i][1];\r\n        data[i * 4 + 2] = bboxByCategory[i][2];\r\n        data[i * 4 + 3] = bboxByCategory[i][3];\r\n      } else {\r\n        data[i * 4] = 0;\r\n        data[i * 4 + 1] = 0;\r\n        data[i * 4 + 2] = 0;\r\n        data[i * 4 + 3] = 0;\r\n      }\r\n    }\r\n\r\n    return regl.texture({\r\n      data,\r\n      shape: [bboxTexRes, bboxTexRes, 4],\r\n      type: 'float',\r\n    });\r\n  };\r\n\r\n  const computeCentroid = (points) => {\r\n    let sumX = 0;\r\n    let sumY = 0;\r\n\r\n    points.forEach((point) => {\r\n      sumX += point[0];\r\n      sumY += point[1];\r\n    });\r\n\r\n    return [\r\n      sumX / points.length,\r\n      sumY / points.length,\r\n    ];\r\n  };\r\n\r\n  const computeBBox = (points) => {\r\n    const centroid = computeCentroid(points);\r\n\r\n    let maxSquaredDist = 0;\r\n    points.forEach((point) => {\r\n      const squaredDist = (centroid[0] - point[0]) ** 2 + (centroid[1] - point[1]) ** 2;\r\n      if (squaredDist > maxSquaredDist) maxSquaredDist = squaredDist;\r\n    });\r\n\r\n    const maxDist = Math.sqrt(maxSquaredDist);\r\n    \r\n    // returns [xMin, yMin, xMax, yMax]\r\n    return [\r\n      centroid[0] - maxDist,\r\n      centroid[1] - maxDist,\r\n      centroid[0] + maxDist,\r\n      centroid[1] + maxDist,\r\n    ];\r\n  };\r\n\r\n  const setPoints = newPoints => {\r\n    isInit = false;\r\n\r\n    numPoints = newPoints.length;\r\n\r\n    stateTex = createStateTexture(newPoints);\r\n    normalPointsIndexBuffer({\r\n      usage: 'static',\r\n      type: 'float',\r\n      data: createPointIndex(numPoints)\r\n    });\r\n\r\n    searchIndex = new KDBush(\r\n      newPoints,\r\n      p => p[0],\r\n      p => p[1],\r\n      16\r\n    );\r\n\r\n    const pointsByCategory = _groupBy(newPoints, 2);\r\n    const bboxByCategory = _mapValues(pointsByCategory, (_, category) => computeBBox(pointsByCategory[category]));\r\n    bboxTex = createBBoxTexture(bboxByCategory);\r\n\r\n    isInit = true;\r\n  };\r\n\r\n  const draw = (time, showRecticleOnce = false) => {\r\n    if (!isInit) return;\r\n\r\n    regl.clear({\r\n      // background color (transparent)\r\n      color: [0, 0, 0, 0],\r\n      depth: 1\r\n    });\r\n    patternManager.clear();\r\n\r\n    isViewChanged = camera.tick();\r\n\r\n    if (backgroundImage) {\r\n      drawBackgroundImage();\r\n    }\r\n\r\n    patternManager.draw(time);\r\n\r\n    // The draw order of the following calls is important!\r\n    drawPointBodies();\r\n    if (!mouseDown && (showRecticle || showRecticleOnce)) drawRecticle();\r\n    if (hoveredPoint >= 0) drawHoveredPoint();\r\n    if (selection.length) drawSelectedPoint();\r\n\r\n    lasso.draw();\r\n\r\n    // Publish camera change\r\n    if (isViewChanged) pubSub.publish('view', camera.view);\r\n  };\r\n\r\n  const drawRaf = withRaf(draw);\r\n\r\n  const publicDraw = (newPoints, showRecticleOnce = false) => {\r\n    if (newPoints) setPoints(newPoints);\r\n    //drawRaf(showRecticleOnce);\r\n  };\r\n\r\n  const withDraw = f => (...args) => {\r\n    const out = f(...args);\r\n    drawRaf();\r\n    return out;\r\n  };\r\n\r\n  const setBackground = newBackground => {\r\n    if (!newBackground) return;\r\n\r\n    background = toRgba(newBackground, true);\r\n  };\r\n\r\n  const setBackgroundImage = newBackgroundImage => {\r\n    if (!newBackgroundImage) {\r\n      backgroundImage = null;\r\n    } else {\r\n      backgroundImage = newBackgroundImage;\r\n    }\r\n  };\r\n\r\n  const setLassoColor = newLassoColor => {\r\n    if (!newLassoColor) return;\r\n\r\n    lassoColor = toRgba(newLassoColor, true);\r\n\r\n    lasso.setStyle({ color: lassoColor });\r\n  };\r\n\r\n  const setLassoMinDelay = newLassoMinDelay => {\r\n    if (!+newLassoMinDelay) return;\r\n\r\n    lassoMinDelay = +newLassoMinDelay;\r\n    lassoExtendDb = withThrottle(lassoExtend, lassoMinDelay);\r\n  };\r\n\r\n  const setLassoMinDist = newLassoMinDist => {\r\n    if (!+newLassoMinDist) return;\r\n\r\n    lassoMinDist = +newLassoMinDist;\r\n  };\r\n\r\n  const setShowRecticle = newShowRecticle => {\r\n    if (newShowRecticle === null) return;\r\n\r\n    showRecticle = newShowRecticle;\r\n  };\r\n\r\n  const setRecticleColor = newRecticleColor => {\r\n    if (!newRecticleColor) return;\r\n\r\n    recticleColor = toRgba(newRecticleColor, true);\r\n\r\n    recticleHLine.setStyle({ color: recticleColor });\r\n    recticleVLine.setStyle({ color: recticleColor });\r\n  };\r\n\r\n  /**\r\n   * Update Regl's viewport, drawingBufferWidth, and drawingBufferHeight\r\n   *\r\n   * @description Call this method after the viewport has changed, e.g., width\r\n   * or height have been altered\r\n   */\r\n  const refresh = () => {\r\n    regl.poll();\r\n    camera.refresh();\r\n  };\r\n\r\n  const get = property => {\r\n    if (property === 'background') return background;\r\n    if (property === 'backgroundImage') return backgroundImage;\r\n    if (property === 'colorBy') return colorBy;\r\n    if (property === 'colors') return colors;\r\n    if (property === 'lassoColor') return lassoColor;\r\n    if (property === 'showRecticle') return showRecticle;\r\n    if (property === 'recticleColor') return recticleColor;\r\n    if (property === 'opacity') return opacity;\r\n    if (property === 'pointOutlineWidth') return pointOutlineWidth;\r\n    if (property === 'pointSize') return pointSize;\r\n    if (property === 'pointSizeSelected') return pointSizeSelected;\r\n    if (property === 'width') return width;\r\n    if (property === 'height') return height;\r\n    if (property === 'aspectRatio') return dataAspectRatio;\r\n    if (property === 'canvas') return canvas;\r\n    if (property === 'regl') return regl;\r\n    if (property === 'version') return version;\r\n\r\n    return undefined;\r\n  };\r\n\r\n  const set = ({\r\n    background: newBackground = null,\r\n    backgroundImage: newBackgroundImage = backgroundImage,\r\n    colorBy: newColorBy = colorBy,\r\n    colors: newColors = null,\r\n    opacity: newOpacity = null,\r\n    lassoColor: newLassoColor = null,\r\n    lassoMinDelay: newLassoMinDelay = null,\r\n    lassoMinDist: newLassoMinDist = null,\r\n    showRecticle: newShowRecticle = null,\r\n    recticleColor: newRecticleColor = null,\r\n    pointOutlineWidth: newPointOutlineWidth = null,\r\n    pointSize: newPointSize = null,\r\n    pointSizeSelected: newPointSizeSelected = null,\r\n    height: newHeight = null,\r\n    width: newWidth = null,\r\n    aspectRatio: newDataAspectRatio = null\r\n  } = {}) => {\r\n    setBackground(newBackground);\r\n    setBackgroundImage(newBackgroundImage);\r\n    setColorBy(newColorBy);\r\n    setColors(newColors);\r\n    setOpacity(newOpacity);\r\n    setLassoColor(newLassoColor);\r\n    setLassoMinDelay(newLassoMinDelay);\r\n    setLassoMinDist(newLassoMinDist);\r\n    setShowRecticle(newShowRecticle);\r\n    setRecticleColor(newRecticleColor);\r\n    setPointOutlineWidth(newPointOutlineWidth);\r\n    setPointSize(newPointSize);\r\n    setPointSizeSelected(newPointSizeSelected);\r\n    setHeight(newHeight);\r\n    setWidth(newWidth);\r\n    setDataAspectRatio(newDataAspectRatio);\r\n\r\n    updateViewAspectRatio();\r\n    camera.refresh();\r\n    refresh();\r\n    //drawRaf();\r\n  };\r\n\r\n  const hover = (point, showRecticleOnce = false) => {\r\n    let needsRedraw = false;\r\n\r\n    if (point >= 0) {\r\n      needsRedraw = true;\r\n      const newHoveredPoint = point !== hoveredPoint;\r\n      hoveredPoint = point;\r\n      hoveredPointIndexBuffer.subdata([point]);\r\n      if (newHoveredPoint) pubSub.publish('pointover', hoveredPoint);\r\n    } else {\r\n      needsRedraw = hoveredPoint;\r\n      hoveredPoint = undefined;\r\n      if (+needsRedraw >= 0) pubSub.publish('pointout', needsRedraw);\r\n    }\r\n\r\n    //if (needsRedraw) drawRaf(null, showRecticleOnce);\r\n  };\r\n\r\n  const reset = () => {\r\n    if (initialView) camera.set(mat4.clone(initialView));\r\n    else camera.lookAt([...initialTarget], initialDistance, initialRotation);\r\n    pubSub.publish('view', camera.view);\r\n  };\r\n\r\n  const keyUpHandler = ({ key }) => {\r\n    switch (key) {\r\n      case 'Escape':\r\n        deselect();\r\n        break;\r\n      default:\r\n      // Nothing\r\n    }\r\n  };\r\n\r\n  const mouseEnterCanvasHandler = () => {\r\n    isMouseInCanvas = true;\r\n  };\r\n\r\n  const mouseLeaveCanvasHandler = () => {\r\n    hover();\r\n    isMouseInCanvas = false;\r\n    //drawRaf();\r\n  };\r\n\r\n  const initCamera = () => {\r\n    camera = createDom2dCamera(canvas);\r\n\r\n    if (initialView) camera.set(mat4.clone(initialView));\r\n    else camera.lookAt([...initialTarget], initialDistance, initialRotation);\r\n  };\r\n\r\n  const wheelHandler = () => {\r\n    //drawRaf();\r\n  };\r\n\r\n  const clear = () => {\r\n    setPoints([]);\r\n  };\r\n\r\n  const init = () => {\r\n    updateViewAspectRatio();\r\n    initCamera();\r\n\r\n    lasso = createLine(regl, { color: lassoColor, width: 3, is2d: true });\r\n    recticleHLine = createLine(regl, {\r\n      color: recticleColor,\r\n      width: 1,\r\n      is2d: true\r\n    });\r\n    recticleVLine = createLine(regl, {\r\n      color: recticleColor,\r\n      width: 1,\r\n      is2d: true\r\n    });\r\n\r\n    // Event listeners\r\n    canvas.addEventListener('wheel', wheelHandler);\r\n\r\n    // Buffers\r\n    normalPointsIndexBuffer = regl.buffer();\r\n    selectedPointsIndexBuffer = regl.buffer();\r\n    hoveredPointIndexBuffer = regl.buffer({\r\n      usage: 'dynamic',\r\n      type: 'float',\r\n      length: FLOAT_BYTES // This buffer is fixed to exactly 1 point\r\n    });\r\n\r\n    colorTex = createColorTexture();\r\n\r\n    // Set dimensions\r\n    set({ width, height });\r\n\r\n    // Setup event handler\r\n    window.addEventListener('keyup', keyUpHandler, false);\r\n    window.addEventListener('blur', blurHandler, false);\r\n    window.addEventListener('mousedown', mouseDownHandler, false);\r\n    window.addEventListener('mouseup', mouseUpHandler, false);\r\n    window.addEventListener('mousemove', mouseMoveHandler, false);\r\n    canvas.addEventListener('mouseenter', mouseEnterCanvasHandler, false);\r\n    canvas.addEventListener('mouseleave', mouseLeaveCanvasHandler, false);\r\n    canvas.addEventListener('click', mouseClickHandler, false);\r\n    canvas.addEventListener('dblclick', mouseDblClickHandler, false);\r\n\r\n    const gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');\r\n    glBench = new GLBench(gl);\r\n\r\n    regl.frame(({ time }) => {\r\n      glBench.begin();\r\n      draw(time);\r\n      glBench.end();\r\n      glBench.nextFrame(Math.floor(time * 1000));\r\n    });\r\n  };\r\n\r\n  const destroy = () => {\r\n    window.removeEventListener('keyup', keyUpHandler, false);\r\n    window.removeEventListener('blur', blurHandler, false);\r\n    window.removeEventListener('mousedown', mouseDownHandler, false);\r\n    window.removeEventListener('mouseup', mouseUpHandler, false);\r\n    window.removeEventListener('mousemove', mouseMoveHandler, false);\r\n    canvas.removeEventListener('mouseenter', mouseEnterCanvasHandler, false);\r\n    canvas.removeEventListener('mouseleave', mouseLeaveCanvasHandler, false);\r\n    canvas.removeEventListener('click', mouseClickHandler, false);\r\n    canvas.removeEventListener('dblclick', mouseDblClickHandler, false);\r\n    canvas = undefined;\r\n    camera = undefined;\r\n    regl = undefined;\r\n    lasso.destroy();\r\n    pubSub.clear();\r\n  };\r\n\r\n  init(canvas);\r\n\r\n  return {\r\n    clear: withDraw(clear),\r\n    deselect,\r\n    destroy,\r\n    draw: publicDraw,\r\n    get,\r\n    hover,\r\n    refresh,\r\n    reset: withDraw(reset),\r\n    select,\r\n    set,\r\n    subscribe: pubSub.subscribe,\r\n    unsubscribe: pubSub.unsubscribe,\r\n    patternManager,\r\n  };\r\n};\r\n\r\nexport default createScatterplot;\r\n\r\nexport { createRegl, createTextureFromUrl };\r\n","export const defaultValues = {\r\n  useColors: true,\r\n  pointSize: 5,\r\n};\r\n\r\nexport const debounceTime = 100;\r\n\r\n\r\n","import { useState } from 'react';\r\nimport _debounce from 'lodash-es/debounce';\r\nimport _isFunction from 'lodash-es/isFunction';\r\nimport { debounceTime } from './constants';\r\n\r\nconst updateValue = _debounce((set, optionName, newValue) => set({ [optionName]: newValue }), debounceTime);\r\nexport default function useSlider(optionName, defaultValue, set, processNewValueFn = null) {\r\n  const [value, setValue] = useState(defaultValue);\r\n  const onChange = (newValue) => {\r\n    if (_isFunction(processNewValueFn)) newValue = processNewValueFn(newValue);\r\n    setValue(newValue);\r\n    updateValue(set, optionName, newValue);\r\n  };\r\n  return [value, onChange];\r\n}\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { FormGroup, Slider, Switch, Alignment, Divider } from '@blueprintjs/core';\r\nimport { defaultValues } from './constants';\r\nimport { toggleTheme } from './actions';\r\nimport useSlider from './useSlider';\r\n\r\nexport default function ScatterplotOptions({ scatterplot }) {\r\n  const [pointSize, pointSizeChange] = useSlider('pointSize', defaultValues.pointSize, scatterplot && scatterplot.set);\r\n  const isDarkTheme = useSelector((state) => state.isDarkTheme);\r\n  const dispatch = useDispatch();\r\n\r\n  //const useColorsChange = (event) => scatterplot.set({ colors: event.target.checked ? colorsCool : colorsLame });\r\n\r\n  return (\r\n    <div>\r\n      <Divider />\r\n      <FormGroup>\r\n        <Switch\r\n          defaultChecked={isDarkTheme}\r\n          label=\"Dark theme\"\r\n          onChange={() => dispatch(toggleTheme())}\r\n          innerLabel=\"no\"\r\n          innerLabelChecked=\"yes\"\r\n          alignIndicator={Alignment.RIGHT}\r\n        />\r\n      </FormGroup>\r\n      <FormGroup\r\n        label={\"Point size\"}\r\n        inline={true}\r\n      >\r\n        <Slider\r\n          stepSize={0.01}\r\n          min={0}\r\n          max={10}\r\n          labelStepSize={10}\r\n          labelPrecision={1}\r\n          value={pointSize}\r\n          onChange={pointSizeChange}\r\n          fill={true}\r\n        />\r\n      </FormGroup>\r\n      \r\n      <Divider />\r\n\r\n      <p style={{ textAlign: 'center' }}>\r\n        <b>Note: </b> \r\n        <span className=\"bp3-text-muted\">Each slider has a 100ms debounce to avoid clogging the system.</span>\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n","export const TOGGLE_THEME = 'toggle theme';\r\nexport const SET_MAX_CATEGORIES = 'set max categories';\r\nexport const UPDATE_CATEGORY_COLOR = 'update category color';\r\n\r\nexport const toggleTheme = () => ({\r\n  type: TOGGLE_THEME\r\n});\r\n\r\nexport const setMaxCategories = (value) => ({\r\n  type: SET_MAX_CATEGORIES,\r\n  value\r\n});\r\n\r\nexport const updateCategoryColor = (category, color) => ({\r\n  type: UPDATE_CATEGORY_COLOR,\r\n  category,\r\n  color\r\n});\r\n","function boxMuller(x, y, sigma, a, k) {\r\n  const twoPI = 2 * Math.PI;\r\n\r\n  let u1;\r\n  let u2;\r\n  do {\r\n    u1 = Math.random();\r\n    u2 = Math.random();\r\n  } while (u1 <= Number.EPSILON);\r\n\r\n  const angle = twoPI * u2;\r\n  const radius = Math.sqrt(-2 * Math.log(u1));\r\n\r\n  let z0 = radius * Math.cos(angle);\r\n  let z1 = radius * Math.sin(angle);\r\n\r\n  const cosA = Math.cos(a);\r\n  const sinA = Math.sin(a);\r\n\r\n  const kcos2Psin2 = k * cosA ** 2 + sinA ** 2;\r\n  const kcossinMcossin = cosA * sinA * (k - 1);\r\n  const cos2Pksin2 = cosA ** 2 + k * sinA ** 2;\r\n\r\n  // elliptic shape is accomplished by rotating and stretching\r\n  // https://www.wolframalpha.com/input/?i=%7B%7Bcos%28a%29%2C-sin%28a%29%2C0%7D%2C%7Bsin%28a%29%2Ccos%28a%29%2C0%7D%2C%7B0%2C0%2C1%7D%7D*%7B%7Bk%2C0%2C0%7D%2C%7B0%2C1%2C0%7D%2C%7B0%2C0%2C1%7D%7D*%7B%7Bcos%28a%29%2Csin%28a%29%2C0%7D%2C%7B-sin%28a%29%2Ccos%28a%29%2C0%7D%2C%7B0%2C0%2C1%7D%7D\r\n  z0 = kcos2Psin2 * z0 + kcossinMcossin * z1;\r\n  z1 = kcossinMcossin * z0 + cos2Pksin2 * z1;\r\n\r\n  return [z0 * sigma + x, z1 * sigma + y];\r\n}\r\n\r\nexport default function dataGen({ x = 0, y = 0, sigma, angle = 0, amplitude = 2, n, category }) {\r\n  const data = [];\r\n\r\n  // generate normal distribution from uniform distribution using box muller algorithm and stretch it so it's elliptic\r\n  for (let i = 0; i < n; ++i) {\r\n    data.push([\r\n      ...boxMuller(x, y, sigma, angle, amplitude),\r\n      category,\r\n      0\r\n    ]);\r\n  }\r\n\r\n  return data;\r\n}\r\n","import React from 'react';\r\nimport { useSelector, shallowEqual } from 'react-redux';\r\nimport { Button } from '@blueprintjs/core';\r\n\r\nexport default function ClusterHeader({ clusterKey, category, setIsOpen, isOpen }) {\r\n  const categoryColors = useSelector((state) => state.categoryColors, shallowEqual);\r\n  const clickHandler = () => setIsOpen(!isOpen);\r\n\r\n  return (\r\n    <Button className=\"cluster-button\" minimal={true} fill={true} active={isOpen} onClick={clickHandler}>\r\n      <div className=\"cluster-header\">\r\n        <div className=\"cluster-title\">\r\n          <b>Cluster: </b> #{clusterKey}\r\n        </div>\r\n        <div className=\"cluster-category\">\r\n          <div style={{ backgroundColor: categoryColors[category] }} className=\"cluster-category__color-box\" />\r\n        </div>\r\n\r\n        <style jsx global>{`\r\n          .cluster-button .bp3-button-text {\r\n            width: 100%;\r\n          }\r\n        `}</style>\r\n        <style jsx>{`\r\n          .cluster-header {\r\n            display: flex;\r\n            align-items: center;\r\n            width: 100%;\r\n          }\r\n\r\n          .cluster-title {\r\n            flex-grow: 1;\r\n          }\r\n\r\n          .cluster-category__color-box {\r\n            float: left;\r\n            width: 20px;\r\n            height: 20px;\r\n            margin: 5px;\r\n            border: 1px solid rgba(0, 0, 0, .2);\r\n          }\r\n        `}</style>\r\n      </div>\r\n    </Button>\r\n  );  \r\n}\r\n","import React, { useState } from 'react';\r\nimport _debounce from 'lodash-es/debounce';\r\nimport { FormGroup, Slider, Collapse, Divider, Button, Intent } from '@blueprintjs/core';\r\nimport ClusterHeader from './ClusterHeader';\r\n\r\nconst debounceTime = 500;\r\n\r\nconst updateX = _debounce((setCluster, newValue) => setCluster({ x: newValue }), debounceTime);\r\nconst updateY = _debounce((setCluster, newValue) => setCluster({ y: newValue }), debounceTime);\r\nconst updateSigma = _debounce((setCluster, newValue) => setCluster({ sigma: newValue }), debounceTime);\r\nconst updateAngle = _debounce((setCluster, newValue) => setCluster({ angle: newValue }), debounceTime);\r\nconst updateAmplitude = _debounce((setCluster, newValue) => setCluster({ amplitude: newValue }), debounceTime);\r\nconst updateN = _debounce((setCluster, newValue) => setCluster({ n: newValue }), debounceTime);\r\nconst updateCategory = _debounce((setCluster, newValue) => setCluster({ category: newValue }), debounceTime);\r\n\r\n\r\nexport default function ClusterOptions({ clusterKey, cluster, setCluster, removeCluster }) {\r\n  const [x, setX] = useState(cluster.x);\r\n  const [y, setY] = useState(cluster.y);\r\n  const [sigma, setSigma] = useState(cluster.sigma);\r\n  const [angle, setAngle] = useState(cluster.angle);\r\n  const [amplitude, setAmplitude] = useState(cluster.amplitude);\r\n  const [n, setN] = useState(cluster.n);\r\n  const [category, setCategory] = useState(cluster.category);\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const xChange = (newValue) => {\r\n    setX(newValue);\r\n    updateX(setCluster, newValue);\r\n  };\r\n  const yChange = (newValue) => {\r\n    setY(newValue);\r\n    updateY(setCluster, newValue);\r\n  };\r\n  const sigmaChange = (newValue) => {\r\n    setSigma(newValue);\r\n    updateSigma(setCluster, newValue);\r\n  };\r\n  const angleChange = (newValue) => {\r\n    setAngle(newValue);\r\n    updateAngle(setCluster, newValue);\r\n  };\r\n  const amplitudeChange = (newValue) => {\r\n    setAmplitude(newValue);\r\n    updateAmplitude(setCluster, newValue);\r\n  };\r\n  const nChange = (newValue) => {\r\n    setN(newValue);\r\n    updateN(setCluster, newValue);\r\n  };\r\n  const categoryChange = (newValue) => {\r\n    setCategory(newValue);\r\n    updateCategory(setCluster, newValue);\r\n  };\r\n\r\n  const removeClickHandler = () => removeCluster(clusterKey);\r\n\r\n  return (\r\n    <div>\r\n      <ClusterHeader clusterKey={clusterKey} category={category} setIsOpen={setIsOpen} isOpen={isOpen} />\r\n      <Collapse isOpen={isOpen}>\r\n        <FormGroup\r\n          label=\"X-pos\"\r\n          inline={true}\r\n        >\r\n          <Slider\r\n            stepSize={0.01}\r\n            min={-1}\r\n            max={1}\r\n            labelPrecision={1}\r\n            labelStepSize={2}\r\n            value={x}\r\n            onChange={xChange}\r\n            fill={true}\r\n          />\r\n        </FormGroup>\r\n        <FormGroup\r\n          label=\"Y-pos\"\r\n          inline={true}\r\n        >\r\n          <Slider\r\n            stepSize={0.01}\r\n            min={-1}\r\n            max={1}\r\n            labelPrecision={1}\r\n            labelStepSize={2}\r\n            value={y}\r\n            onChange={yChange}\r\n            fill={true}\r\n          />\r\n        </FormGroup>\r\n        <FormGroup\r\n          label=\"Std. Dev.\"\r\n          inline={true}\r\n        >\r\n          <Slider\r\n            stepSize={0.01}\r\n            min={0}\r\n            max={0.8}\r\n            labelPrecision={1}\r\n            labelStepSize={0.8}\r\n            value={sigma}\r\n            onChange={sigmaChange}\r\n            fill={true}\r\n          />\r\n        </FormGroup>\r\n        <FormGroup\r\n          label=\"Angle\"\r\n          inline={true}\r\n        >\r\n          <Slider\r\n            stepSize={0.03}\r\n            min={0}\r\n            max={Math.PI}\r\n            labelPrecision={1}\r\n            labelStepSize={Math.PI}\r\n            value={angle}\r\n            onChange={angleChange}\r\n            fill={true}\r\n          />\r\n        </FormGroup>\r\n        <FormGroup\r\n          label=\"Amplitude\"\r\n          inline={true}\r\n        >\r\n          <Slider\r\n            stepSize={0.03}\r\n            min={0}\r\n            max={3}\r\n            labelPrecision={1}\r\n            labelStepSize={3}\r\n            value={amplitude}\r\n            onChange={amplitudeChange}\r\n            fill={true}\r\n          />\r\n        </FormGroup>\r\n        <FormGroup\r\n          label=\"Points\"\r\n          inline={true}\r\n        >\r\n          <Slider\r\n            stepSize={10}\r\n            min={1}\r\n            max={10000}\r\n            labelStepSize={9999}\r\n            value={n}\r\n            onChange={nChange}\r\n            fill={true}\r\n          />\r\n        </FormGroup>\r\n        <FormGroup\r\n          label=\"Category\"\r\n          inline={true}\r\n        >\r\n          <Slider\r\n            stepSize={1}\r\n            min={0}\r\n            max={9}\r\n            labelStepSize={9}\r\n            value={category}\r\n            onChange={categoryChange}\r\n            fill={true}\r\n          />\r\n        </FormGroup>\r\n        <div className=\"cluster-remove\">\r\n          <Button intent={Intent.DANGER} onClick={removeClickHandler}>\r\n            Remove this cluster\r\n          </Button>\r\n        </div>\r\n        <Divider />\r\n      </Collapse>\r\n\r\n      <style jsx>{`\r\n        .cluster-remove {\r\n          margin: 10px 0;\r\n          text-align: center;\r\n        }\r\n      `}</style>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { Divider, Button, Intent } from '@blueprintjs/core';\r\nimport dataGen from './dataGen';\r\nimport ClusterOptions from './ClusterOptions';\r\nimport { setMaxCategories } from './actions';\r\n\r\n// sigma ~ x radius\r\n// amplitude ~ y radius\r\nconst defaultCluster = (category) => {\r\n  if (category > 9) throw new Error(\"There are at most 10 categories!\");\r\n\r\n  const sigma = Math.random() / 3 + 0.1;\r\n  const max = 1 - sigma * 2 - 0.2; // want x, y mean in interval (-max, max) to avoid points outside of canvas boundary.\r\n\r\n  return {\r\n    x: Math.random() * max * 2 - max,\r\n    y: Math.random() * max * 2 - max,\r\n    sigma,\r\n    angle: Math.random() * Math.PI,\r\n    amplitude: Math.random(),\r\n    n: 100,\r\n    category\r\n  };\r\n};\r\n\r\n// gives you a new key when you call it.\r\nconst keyGen = (() => {\r\n  let i = 3;\r\n  return () => i++;\r\n})();\r\n\r\nexport default function DataOptions({ scatterplot }) {\r\n  const [clusters, setClusters] = useState({\r\n    1: defaultCluster(0),\r\n    2: defaultCluster(1)\r\n  });\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    if (scatterplot !== null) {\r\n      scatterplot.draw(Object.keys(clusters).map((clusterKey) => dataGen(clusters[clusterKey]))\r\n        .reduce((acc, curr) => acc.concat(curr), []));\r\n      dispatch(setMaxCategories(Math.max(...Object.keys(clusters).map((clusterKey) => clusters[clusterKey].category)) + 1));\r\n    }\r\n  }, [scatterplot, clusters])\r\n\r\n  const createSetCluster = (clusterKey) => {\r\n    return (newCluster) => {\r\n      setClusters((oldClusters) => ({ ...oldClusters, [clusterKey]: { ...oldClusters[clusterKey], ...newCluster }}));\r\n    };\r\n  };\r\n\r\n  const addCluster = (category) => setClusters((oldClusters) => ({\r\n    ...oldClusters,\r\n    [keyGen()]: defaultCluster(category)\r\n  }));\r\n\r\n  const removeCluster = (clusterKey) => setClusters((oldClusters) => {\r\n    const { [clusterKey]: _, ...otherKeys } = oldClusters; /* eslint-disable-line no-unused-vars */\r\n    return otherKeys;\r\n  });\r\n\r\n  const unusedCategory = () => {\r\n    const usedCategories = new Set();\r\n    Object.keys(clusters).forEach((clusterKey) => usedCategories.add(clusters[clusterKey].category));\r\n\r\n    for (let i = 0; i < 10; ++i) {\r\n      if (!usedCategories.has(i)) return i;\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  const addClickHandler = () => addCluster(unusedCategory());\r\n\r\n  const renderClusterOptions = Object.keys(clusters).map((clusterKey) => (\r\n    <ClusterOptions\r\n      key={clusterKey}\r\n      clusterKey={clusterKey}\r\n      cluster={clusters[clusterKey]}\r\n      setCluster={createSetCluster(clusterKey)}\r\n      removeCluster={removeCluster}\r\n    />\r\n  ));\r\n\r\n  return (\r\n    <div>\r\n      <Divider />\r\n      <p className=\"bp3-text-muted\" style={{ textAlign: 'center' }}>\r\n        Click on a cluster to show/hide options.\r\n      </p>\r\n      {renderClusterOptions}\r\n      <div className=\"data-add-new\">\r\n        <Button intent={Intent.PRIMARY} onClick={addClickHandler}>\r\n          Add cluster\r\n        </Button>\r\n      </div>\r\n\r\n      <style jsx>{`\r\n        .data-add-new {\r\n          margin: 10px 0;\r\n          text-align: center;\r\n        }\r\n      `}</style>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { useSelector, shallowEqual } from 'react-redux';\r\nimport { Button } from '@blueprintjs/core';\r\n\r\nexport default function PatternHeader({ patternKey, category, setIsOpen, isOpen }) {\r\n  const categoryColors = useSelector((state) => state.categoryColors, shallowEqual);\r\n  const clickHandler = () => setIsOpen(!isOpen);\r\n\r\n  return (\r\n    <Button className=\"pattern-button\" minimal={true} fill={true} active={isOpen} onClick={clickHandler}>\r\n      <div className=\"pattern-header\">\r\n        <div className=\"pattern-title\">\r\n          <b>Pattern: </b> #{patternKey}\r\n        </div>\r\n        <div className=\"pattern-category\">\r\n          <div style={{ backgroundColor: categoryColors[category] }} className=\"pattern-category__color-box\" />\r\n        </div>\r\n\r\n        <style jsx global>{`\r\n          .pattern-button .bp3-button-text {\r\n            width: 100%;\r\n          }\r\n        `}</style>\r\n        <style jsx>{`\r\n          .pattern-header {\r\n            display: flex;\r\n            align-items: center;\r\n            width: 100%;\r\n          }\r\n\r\n          .pattern-title {\r\n            flex-grow: 1;\r\n          }\r\n\r\n          .pattern-category__color-box {\r\n            float: left;\r\n            width: 20px;\r\n            height: 20px;\r\n            margin: 5px;\r\n            border: 1px solid rgba(0, 0, 0, .2);\r\n          }\r\n        `}</style>\r\n      </div>\r\n    </Button>\r\n  );  \r\n}\r\n","import { UPDATE_CATEGORY_COLOR } from '../actions';\r\n\r\n// https://blueprintjs.com/docs/#core/colors\r\nexport const defaultColors = [\r\n  \"#DB2C6F\",\r\n  \"#2965CC\",\r\n  \"#29A634\",\r\n  \"#D99E0B\",\r\n  \"#D13913\",\r\n  \"#8F398F\",\r\n  \"#00B3A4\",\r\n  \"#9BBF30\",\r\n  \"#96622D\",\r\n  \"#7157D9\"\r\n];\r\n\r\nexport default function categoryColors(state = defaultColors, action) {\r\n  if (action.type === UPDATE_CATEGORY_COLOR) {\r\n    const shallowCopy = [...state];\r\n    shallowCopy[action.category] = action.color;\r\n    return shallowCopy;\r\n  }\r\n  return state;\r\n}\r\n","import { useState } from 'react';\r\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\r\nimport { updateCategoryColor } from './actions';\r\n\r\nexport default function useColorPicker(pattern, setPattern) {\r\n  const dispatch = useDispatch();\r\n  const categoryColors = useSelector((state) => state.categoryColors, shallowEqual);\r\n  const [color, setColor] = useState(categoryColors[pattern.category]);\r\n  const colorChange = (newColor) => {\r\n    setPattern({ hsvColor: [newColor.hsv.h / 360, newColor.hsv.s, newColor.hsv.v]});\r\n    dispatch(updateCategoryColor(pattern.category, newColor.hex));\r\n    setColor(newColor.hex);\r\n  };\r\n\r\n  return [color, colorChange];\r\n}\r\n","import React from 'react';\r\nimport { FormGroup, Slider, Switch, Alignment } from '@blueprintjs/core';\r\nimport { CirclePicker } from 'react-color';\r\nimport { defaultColors } from './reducers/categoryColors';\r\nimport useSlider from './useSlider';\r\nimport useColorPicker from './useColorPicker';\r\n\r\nfunction renderPercentage(val) {\r\n  return `${Math.round(val * 100)}%`;\r\n}\r\n\r\nfunction renderSeconds(val) {\r\n  return `${val.toPrecision(2)}s`;\r\n}\r\n\r\nexport default function PulseOptions({ pattern, setPattern }) {\r\n  const [a, aChange] = useSlider('a', pattern.a, setPattern);\r\n  const [c1, c1Change] = useSlider('c1', pattern.c1, setPattern);\r\n  const [c2, c2Change] = useSlider('c2', pattern.c2, setPattern);\r\n  const [minValue, minValueChange] = useSlider('minValue', pattern.minValue, setPattern);\r\n  const [cyclesPerSecond, cyclesPerSecondChange] = useSlider('cyclesPerSecond', pattern.cyclesPerSecond, setPattern);\r\n  const [wavesPerCycle, wavesPerCycleChange] = useSlider('wavesPerCycle', pattern.wavesPerCycle, setPattern);\r\n  const [color, colorChange] = useColorPicker(pattern, setPattern);\r\n  const [hueVariation, hueVariationChange] = useSlider('hueVariation', pattern.hueVariation, setPattern);\r\n  const [hueVariationPeriod, hueVariationPeriodChange] = useSlider('hueVariationPeriod', pattern.hueVariationPeriod, setPattern);\r\n\r\n  const directionChange = (event) => setPattern({ direction: event.target.checked ? 1 : -1 });\r\n\r\n  return (\r\n    <>\r\n      <FormGroup>\r\n        <Switch\r\n          defaultChecked={pattern.direction === 1}\r\n          label=\"Direction\"\r\n          onChange={directionChange}\r\n          innerLabel=\"In\"\r\n          innerLabelChecked=\"Out\"\r\n          alignIndicator={Alignment.RIGHT}\r\n        />\r\n      </FormGroup>\r\n      <FormGroup\r\n        label=\"a\"\r\n        inline={true}\r\n      >\r\n        <Slider\r\n          stepSize={0.01}\r\n          min={0}\r\n          max={1}\r\n          labelPrecision={2}\r\n          labelStepSize={1}\r\n          value={a}\r\n          onChange={aChange}\r\n          fill={true}\r\n        />\r\n      </FormGroup>\r\n      <FormGroup\r\n        label=\"c1\"\r\n        inline={true}\r\n      >\r\n        <Slider\r\n          stepSize={0.01}\r\n          min={0}\r\n          max={1}\r\n          labelPrecision={2}\r\n          labelStepSize={1}\r\n          value={c1}\r\n          onChange={c1Change}\r\n          fill={true}\r\n        />\r\n      </FormGroup>\r\n      <FormGroup\r\n        label=\"c2\"\r\n        inline={true}\r\n      >\r\n        <Slider\r\n          stepSize={0.01}\r\n          min={0}\r\n          max={1}\r\n          labelPrecision={2}\r\n          labelStepSize={1}\r\n          value={c2}\r\n          onChange={c2Change}\r\n          fill={true}\r\n        />\r\n      </FormGroup>\r\n      <FormGroup\r\n        label=\"Min value\"\r\n        inline={true}\r\n      >\r\n        <Slider\r\n          stepSize={0.01}\r\n          min={0}\r\n          max={1}\r\n          labelStepSize={1}\r\n          labelRenderer={renderPercentage}\r\n          value={minValue}\r\n          onChange={minValueChange}\r\n          fill={true}\r\n        />\r\n      </FormGroup>\r\n      <FormGroup\r\n        label=\"Cycles/s\"\r\n        inline={true}\r\n      >\r\n        <Slider\r\n          stepSize={0.01}\r\n          min={0}\r\n          max={5}\r\n          labelPrecision={1}\r\n          labelStepSize={5}\r\n          value={cyclesPerSecond}\r\n          onChange={cyclesPerSecondChange}\r\n          fill={true}\r\n        />\r\n      </FormGroup>\r\n      <FormGroup\r\n        label=\"Waves/cycle\"\r\n        inline={true}\r\n      >\r\n        <Slider\r\n          stepSize={0.01}\r\n          min={0}\r\n          max={5}\r\n          labelPrecision={1}\r\n          labelStepSize={5}\r\n          value={wavesPerCycle}\r\n          onChange={wavesPerCycleChange}\r\n          fill={true}\r\n        />\r\n      </FormGroup>\r\n      <FormGroup\r\n        label=\"Color\"\r\n        inline={true}\r\n      >\r\n        <CirclePicker\r\n          color={color}\r\n          colors={defaultColors}\r\n          onChange={colorChange}\r\n          circleSize={14}\r\n          circleSpacing={1}\r\n          width={150}\r\n        />\r\n      </FormGroup>\r\n      <FormGroup\r\n        label=\"Hue amp.\"\r\n        inline={true}\r\n      >\r\n        <Slider\r\n          stepSize={0.005}\r\n          min={0}\r\n          max={0.2}\r\n          labelPrecision={2}\r\n          labelStepSize={0.2}\r\n          labelRenderer={renderPercentage}\r\n          value={hueVariation}\r\n          onChange={hueVariationChange}\r\n          fill={true}\r\n        />\r\n      </FormGroup>\r\n      <FormGroup\r\n        label=\"Hue period\"\r\n        inline={true}\r\n      >\r\n        <Slider\r\n          stepSize={0.01}\r\n          min={0}\r\n          max={5}\r\n          labelStepSize={5}\r\n          labelRenderer={renderSeconds}\r\n          value={hueVariationPeriod}\r\n          onChange={hueVariationPeriodChange}\r\n          fill={true}\r\n        />\r\n      </FormGroup>\r\n    </>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { FormGroup, Slider, Switch, Alignment } from '@blueprintjs/core';\r\nimport { CirclePicker } from 'react-color';\r\nimport { defaultColors } from './reducers/categoryColors';\r\nimport useSlider from './useSlider';\r\nimport useColorPicker from './useColorPicker';\r\n\r\nfunction renderPercentage(val) {\r\n  return `${Math.round(val * 100)}%`;\r\n}\r\n\r\nfunction renderSeconds(val) {\r\n  return `${val.toPrecision(2)}s`;\r\n}\r\n\r\nexport default function RadarOptions({ pattern, setPattern }) {\r\n  const [gamma1, gamma1Change] = useSlider('gamma1', pattern.gamma1, setPattern);\r\n  const [gamma2, gamma2Change] = useSlider('gamma2', pattern.gamma2, setPattern);\r\n  const [maxValue, maxValueChange] = useSlider('maxValue', pattern.maxValue, setPattern);\r\n  const [minValue, minValueChange] = useSlider('minValue', pattern.minValue, setPattern);\r\n  const [cyclesPerSecond, cyclesPerSecondChange] = useSlider('cyclesPerSecond', pattern.cyclesPerSecond, setPattern);\r\n  const [nSpokes, nSpokesChange] = useSlider('nSpokes', pattern.nSpokes, setPattern);\r\n  const [color, colorChange] = useColorPicker(pattern, setPattern);\r\n  const [hueVariation, hueVariationChange] = useSlider('hueVariation', pattern.hueVariation, setPattern);\r\n  const [hueVariationPeriod, hueVariationPeriodChange] = useSlider('hueVariationPeriod', pattern.hueVariationPeriod, setPattern);\r\n\r\n  const directionChange = (event) => setPattern({ direction: event.target.checked ? 1 : -1 });\r\n\r\n  return (\r\n    <>\r\n      <FormGroup>\r\n        <Switch\r\n          defaultChecked={pattern.direction === 1}\r\n          label=\"Direction\"\r\n          onChange={directionChange}\r\n          innerLabel=\"Counter-clockwise\"\r\n          innerLabelChecked=\"Clockwise\"\r\n          alignIndicator={Alignment.RIGHT}\r\n        />\r\n      </FormGroup>\r\n      <FormGroup\r\n        label=\"gamma1\"\r\n        inline={true}\r\n      >\r\n        <Slider\r\n          stepSize={0.01}\r\n          min={0}\r\n          max={25}\r\n          labelPrecision={1}\r\n          labelStepSize={25}\r\n          value={gamma1}\r\n          onChange={gamma1Change}\r\n          fill={true}\r\n        />\r\n      </FormGroup>\r\n      <FormGroup\r\n        label=\"gamma2\"\r\n        inline={true}\r\n      >\r\n        <Slider\r\n          stepSize={0.01}\r\n          min={0}\r\n          max={25}\r\n          labelPrecision={1}\r\n          labelStepSize={25}\r\n          value={gamma2}\r\n          onChange={gamma2Change}\r\n          fill={true}\r\n        />\r\n      </FormGroup>\r\n      <FormGroup\r\n        label=\"Max value\"\r\n        inline={true}\r\n      >\r\n        <Slider\r\n          stepSize={0.01}\r\n          min={0}\r\n          max={1}\r\n          labelStepSize={1}\r\n          value={maxValue}\r\n          onChange={maxValueChange}\r\n          labelRenderer={renderPercentage}\r\n          fill={true}\r\n        />\r\n      </FormGroup>\r\n      <FormGroup\r\n        label=\"Min value\"\r\n        inline={true}\r\n      >\r\n        <Slider\r\n          stepSize={0.01}\r\n          min={0}\r\n          max={1}\r\n          labelStepSize={1}\r\n          value={minValue}\r\n          onChange={minValueChange}\r\n          labelRenderer={renderPercentage}\r\n          fill={true}\r\n        />\r\n      </FormGroup>\r\n      <FormGroup\r\n        label=\"Cycles/s\"\r\n        inline={true}\r\n      >\r\n        <Slider\r\n          stepSize={0.01}\r\n          min={0}\r\n          max={5}\r\n          labelPrecision={1}\r\n          labelStepSize={5}\r\n          value={cyclesPerSecond}\r\n          onChange={cyclesPerSecondChange}\r\n          fill={true}\r\n        />\r\n      </FormGroup>\r\n      <FormGroup\r\n        label='\"Spokes\"'\r\n        inline={true}\r\n      >\r\n        <Slider\r\n          stepSize={1}\r\n          min={1}\r\n          max={10}\r\n          labelStepSize={9}\r\n          value={nSpokes}\r\n          onChange={nSpokesChange}\r\n          fill={true}\r\n        />\r\n      </FormGroup>\r\n      <FormGroup\r\n        label=\"Color\"\r\n        inline={true}\r\n      >\r\n        <CirclePicker\r\n          color={color}\r\n          colors={defaultColors}\r\n          onChange={colorChange}\r\n          circleSize={14}\r\n          circleSpacing={1}\r\n          width={150}\r\n        />\r\n      </FormGroup>\r\n      <FormGroup\r\n        label=\"Hue amp.\"\r\n        inline={true}\r\n      >\r\n        <Slider\r\n          stepSize={0.005}\r\n          min={0}\r\n          max={0.2}\r\n          labelPrecision={2}\r\n          labelStepSize={0.2}\r\n          labelRenderer={renderPercentage}\r\n          value={hueVariation}\r\n          onChange={hueVariationChange}\r\n          fill={true}\r\n        />\r\n      </FormGroup>\r\n      <FormGroup\r\n        label=\"Hue period\"\r\n        inline={true}\r\n      >\r\n        <Slider\r\n          stepSize={0.01}\r\n          min={0}\r\n          max={5}\r\n          labelStepSize={5}\r\n          labelRenderer={renderSeconds}\r\n          value={hueVariationPeriod}\r\n          onChange={hueVariationPeriodChange}\r\n          fill={true}\r\n        />\r\n      </FormGroup>\r\n    </>\r\n  );\r\n}\r\n","import React, { useState } from 'react';\r\nimport { FormGroup, HTMLSelect, Collapse, Divider } from '@blueprintjs/core';\r\nimport PatternHeader from './PatternHeader';\r\nimport { PATTERN_TYPES, defaultOptions } from './scatterplot/patterns/PatternManager';\r\nimport PulseOptions from './PulseOptions';\r\nimport RadarOptions from './RadarOptions';\r\n\r\nexport default function PatternOptions({ patternKey, pattern, setPattern }) {\r\n  const [type, setType] = useState(pattern.type);\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const typeChange = (event) => {\r\n    const newValue = parseInt(event.target.value, 10);\r\n    setPattern({ type: newValue, ...defaultOptions[newValue] });\r\n    setType(newValue);\r\n  };\r\n\r\n  let typeOptions;\r\n  if (type === PATTERN_TYPES.PULSE) {\r\n    typeOptions = <PulseOptions pattern={pattern} setPattern={setPattern} />\r\n  } else if (type === PATTERN_TYPES.RADAR) {\r\n    typeOptions = <RadarOptions pattern={pattern} setPattern={setPattern} />\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <PatternHeader patternKey={patternKey} category={pattern.category} setIsOpen={setIsOpen} isOpen={isOpen} />\r\n      <Collapse isOpen={isOpen}>\r\n        <FormGroup\r\n          label=\"Type\"\r\n          inline={true}\r\n        >\r\n          <HTMLSelect\r\n            options={[\r\n              { label: 'Radar', value: PATTERN_TYPES.RADAR },\r\n              { label: 'Pulse', value: PATTERN_TYPES.PULSE },\r\n            ]}\r\n            onChange={typeChange}\r\n            value={type}\r\n            fill={true}\r\n          />\r\n        </FormGroup>\r\n        {typeOptions}\r\n        <Divider />\r\n      </Collapse>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useSelector, shallowEqual } from 'react-redux'\r\nimport tinycolor from 'tinycolor2';\r\nimport { Divider } from '@blueprintjs/core';\r\nimport PatternOptions from './PatternOptions';\r\nimport { PATTERN_TYPES, defaultOptions } from './scatterplot/patterns/PatternManager';\r\n\r\n// gives you a new key when you call it.\r\nconst keyGen = (() => {\r\n  let i = 3;\r\n  return () => i++;\r\n})();\r\n\r\nconst defaultPulse = (category, hsvColor) => ({\r\n  type: PATTERN_TYPES.PULSE,\r\n  category,\r\n  ...defaultOptions[PATTERN_TYPES.PULSE],\r\n  hsvColor\r\n});\r\n\r\nconst defaultRadar = (category, hsvColor) => ({\r\n  type: PATTERN_TYPES.RADAR,\r\n  category,\r\n  ...defaultOptions[PATTERN_TYPES.RADAR],\r\n  hsvColor\r\n});\r\n\r\nfunction toHsvColor(hex) {\r\n  const hsvObj = tinycolor(hex).toHsv();\r\n  return [hsvObj.h / 360, hsvObj.s, hsvObj.v];\r\n}\r\n\r\nexport default function DataOptions({ scatterplot }) {\r\n  const categoryColors = useSelector((state) => state.categoryColors, shallowEqual);\r\n\r\n  const [patterns, setPatterns] = useState({\r\n    1: defaultRadar(0, toHsvColor(categoryColors[0])),\r\n    2: defaultPulse(1, toHsvColor(categoryColors[1]))\r\n  });\r\n\r\n  const maxCategories = useSelector((state) => state.maxCategories);\r\n\r\n  // TODO: effect when maxCategories change, add/remove patterns\r\n\r\n  useEffect(() => {\r\n    if (scatterplot !== null) {\r\n      scatterplot.patternManager.setAll(Object.keys(patterns).map((patternKey) => patterns[patternKey]));\r\n    }\r\n  }, [scatterplot, patterns])\r\n\r\n  const createSetPattern = (patternKey) => {\r\n    return (newPattern) => {\r\n      setPatterns((oldPatterns) => ({ ...oldPatterns, [patternKey]: { ...oldPatterns[patternKey], ...newPattern }}));\r\n    };\r\n  };\r\n\r\n  const addPattern = (category) => setPatterns((oldPatterns) => ({\r\n    ...oldPatterns,\r\n    [keyGen()]: defaultPulse(category)\r\n  }));\r\n\r\n  const removePattern = (patternKey) => setPatterns((oldPatterns) => {\r\n    const { [patternKey]: _, ...otherKeys } = oldPatterns; /* eslint-disable-line no-unused-vars */\r\n    return otherKeys;\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (maxCategories > 0) { // initial state\r\n      // try delete first\r\n      const categoriesToAdd = new Set(new Array(maxCategories).fill().map((_, i) => i));\r\n      Object.keys(patterns).forEach((patternKey) => {\r\n        const pattern = patterns[patternKey];\r\n        if (pattern.category >= maxCategories) removePattern(patternKey);\r\n        else categoriesToAdd.delete(pattern.category);\r\n      });\r\n\r\n      // try add\r\n      categoriesToAdd.forEach((category) => addPattern(category));\r\n    }\r\n  }, [maxCategories]);\r\n\r\n\r\n  const renderPatternOptions = Object.keys(patterns).map((patternKey) => (\r\n    <PatternOptions\r\n      key={patternKey}\r\n      patternKey={patternKey}\r\n      pattern={patterns[patternKey]}\r\n      setPattern={createSetPattern(patternKey)}\r\n    />\r\n  ));\r\n\r\n  return (\r\n    <div>\r\n      <Divider />\r\n      <p className=\"bp3-text-muted\" style={{ textAlign: 'center' }}>\r\n        Click on a cluster to show/hide options.\r\n      </p>\r\n      {renderPatternOptions}\r\n\r\n      <style jsx>{`\r\n        .data-add-new {\r\n          margin: 10px 0;\r\n          text-align: center;\r\n        }\r\n      `}</style>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Card, Tabs, Tab } from '@blueprintjs/core';\r\nimport ScatterplotOptions from './ScatterplotOptions';\r\nimport DataOptions from './DataOptions';\r\nimport PatternsOptions from './PatternsOptions';\r\n\r\nexport default function Sidebar({ scatterplot }) {\r\n  const isDarkTheme = useSelector((state) => state.isDarkTheme);\r\n\r\n  return (\r\n    <Card className={`card-sidebar ${isDarkTheme ? 'bp3-dark' : ''}`} elevation={2}>\r\n      <Tabs\r\n        id=\"sidebar-tabs\"\r\n      >\r\n        <Tab\r\n          title=\"Scatterplot\"\r\n          id=\"scatterplot-options-tab\"\r\n          panel={<ScatterplotOptions scatterplot={scatterplot} />}\r\n        />\r\n        <Tab\r\n          title=\"Data\"\r\n          id=\"data-options-tab\"\r\n          panel={<DataOptions scatterplot={scatterplot} />}\r\n        />\r\n        <Tab\r\n          title=\"Patterns\"\r\n          id=\"patterns-options-tab\"\r\n          panel={<PatternsOptions scatterplot={scatterplot} />}\r\n        />\r\n      </Tabs>\r\n      \r\n      <style jsx global>{`\r\n        .card-sidebar {\r\n          width: 300px;\r\n          border-radius: 0;\r\n          overflow-y: scroll;\r\n          overflow-x: hidden;\r\n        }\r\n\r\n        .bp3-tab-list {\r\n          justify-content: center;\r\n        }\r\n      `}</style>\r\n    </Card>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nexport default function Meta() {\r\n  return (\r\n    <>\r\n      <style jsx global>{`\r\n        html, body, #root {\r\n          margin: 0;\r\n          padding: 0;\r\n          width: 100%;\r\n          height: 100%;\r\n        }\r\n\r\n        .bp3-collapse-body {\r\n          padding: 10px 0;\r\n        }\r\n\r\n        .bp3-form-group {\r\n          margin-bottom: 0px;\r\n        }\r\n\r\n        .bp3-form-group.bp3-inline label.bp3-label {\r\n          margin-right: 20px;\r\n          min-width: 70px;\r\n        }\r\n\r\n        .circle-picker {\r\n          margin-top: 5px;\r\n        }\r\n      `}</style>\r\n    </>\r\n  );\r\n}\r\n","import React, { useCallback, useState } from 'react';\nimport { useSelector, shallowEqual } from 'react-redux'\nimport createScatterplot from './scatterplot';\nimport Sidebar from './Sidebar';\nimport Meta from './Meta';\nimport { defaultValues } from './constants';\n\nfunction initScatterplot(canvas, setScatterplot, initColors) {\n  let { width, height } = canvas.getBoundingClientRect();\n\n  const lassoMinDelay = 10;\n  const lassoMinDist = 2;\n  const pointSize = defaultValues.pointSize;\n  const showRecticle = true;\n  const recticleColor = [1, 1, 0.878431373, 0.33];\n\n  const scatterplot = createScatterplot({\n    canvas,\n    width,\n    height,\n    lassoMinDelay,\n    lassoMinDist,\n    pointSize,\n    showRecticle,\n    recticleColor,\n  });\n\n  const resizeHandler = () => {\n    ({ width, height } = canvas.getBoundingClientRect());\n    scatterplot.set({ width, height });\n  };\n  window.addEventListener('resize', resizeHandler);\n\n  scatterplot.set({ colorBy: 'category', colors: initColors });\n  setScatterplot(scatterplot);\n}\n\nfunction App() {\n  const [scatterplot, setScatterplot] = useState(null);\n  const isDarkTheme = useSelector((state) => state.isDarkTheme);\n  const categoryColors = useSelector((state) => state.categoryColors, shallowEqual);\n  const canvasRef = useCallback((canvas) => {\n    initScatterplot(canvas, setScatterplot, categoryColors);\n  }, [setScatterplot]);\n\n  //const darkBg = '#10161A';\n  const darkBg = '#000000';\n  //const lightBg = '#efefef';\n  const lightBg = '#ffffff';\n\n  return (\n    <div className=\"App\">\n      <Meta />\n      <div className=\"content\">\n        <div className=\"canvas-wrapper\">\n          <canvas className=\"canvas\" ref={canvasRef}></canvas>\n        </div>\n      </div>\n      <Sidebar scatterplot={scatterplot} />\n      <style jsx>{`\n        .App {\n          background-color: ${isDarkTheme ? darkBg : lightBg};\n          width: 100%;\n          height: 100%;\n          position: relative;\n          display: flex;\n        }\n\n        .content {\n          flex-grow: 1;\n          height: 100%;\n          position: relative;\n        }\n\n        .canvas-wrapper {\n          position: absolute;\n          top: 0;\n          right: 0;\n          bottom: 0;\n          left: 0;\n        }\n\n        .canvas {\n          position: absolute;\n          width: 100%;\n          height: 100%;\n        }\n      `}</style>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from 'redux';\r\nimport categoryColors from './categoryColors';\r\nimport isDarkTheme from './isDarkTheme';\r\nimport maxCategories from './maxCategories';\r\n\r\nexport default combineReducers({\r\n  categoryColors,\r\n  isDarkTheme,\r\n  maxCategories\r\n});\r\n","import { TOGGLE_THEME } from '../actions';\r\n\r\nexport default function isDarkTheme(state = true, action) {\r\n  if (action.type === TOGGLE_THEME)\r\n    return !state;\r\n  return state;\r\n}\r\n","import { SET_MAX_CATEGORIES } from '../actions';\r\n\r\nexport default function maxCategories(state = 0, action) {\r\n  if (action.type === SET_MAX_CATEGORIES)\r\n    return action.value;\r\n  return state;\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux'\nimport * as serviceWorker from './serviceWorker';\nimport rootReducer from './reducers';\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}